

00:00:00.446 --> 00:00:03,520 line:100% position:50% align:middle
♪ [music] ♪

00:00:12.979 --> 00:00:14,948 line:100% position:50% align:middle
In this exercise, we're going to make this

00:00:14.948 --> 00:00:20,360 line:100% position:50% align:middle
really sweet JavaScript Drum Kit. I'm not
really exactly sure what it is but it's

00:00:20.360 --> 00:00:23,870 line:100% position:50% align:middle
really fun to play and when you hit the
corresponding key on your keyboard,

00:00:23.870 --> 00:00:26,770 line:100% position:50% align:middle
it's going to do two things. First of all,
it's going to play the sound that's

00:00:26.770 --> 00:00:30,980 line:100% position:50% align:middle
associated with that key and second of
all, it's going to do this short little

00:00:30.980 --> 00:00:36,690 line:100% position:50% align:middle
animation where it pops the button up to
be a little bit bigger than we want.

00:00:36.690 --> 00:00:42,090 line:100% position:50% align:middle
And then also, it will apply that yellow
border and that little background there.

00:00:42.090 --> 00:00:45,290 line:100% position:50% align:middle
It's really, really subtle and I'll show
you how that's working here.

00:00:45.290 --> 00:00:49,070 line:100% position:50% align:middle
We inspect on this kick one right here.
You see we have this data dash key and

00:00:49.070 --> 00:00:53,190 line:100% position:50% align:middle
we'll look that in just a second, but when
I press it, you can't even see it adding

00:00:53.190 --> 00:00:57,140 line:100% position:50% align:middle
because it's going so quickly. But what
that's doing is it's adding a class of

00:00:57.140 --> 00:01:02,807 line:100% position:50% align:middle
playing to that element which will then
kick in the CSS if I open up today's

00:01:02.807 --> 00:01:07,458 line:100% position:50% align:middle
exercise and we'll look at stalled at CSS.
You see we have class of playing that's

00:01:07.458 --> 00:01:12,070 line:100% position:50% align:middle
going to scale it up by 1.1 in our CSS.
It's going to change the border color.

00:01:12.070 --> 00:01:15,680 line:100% position:50% align:middle
It's going to change the back shadow. Now
because if we look at our regular key

00:01:15.680 --> 00:01:21,190 line:100% position:50% align:middle
here, you see that we have a transition
that is 0.07 seconds long really,

00:01:21.190 --> 00:01:26,260 line:100% position:50% align:middle
really quick. And that's going to scale it
up and change the background color behind

00:01:26.260 --> 00:01:30,910 line:100% position:50% align:middle
it. So that's really the two things that
we have here and if you would like to sort

00:01:30.910 --> 00:01:36,200 line:100% position:50% align:middle
of go at this on your own, pause the video
here, try to get this up in working.

00:01:36.200 --> 00:01:40,010 line:100% position:50% align:middle
Otherwise, let's go ahead for the ride and
take a look at what we're working with

00:01:40.010 --> 00:01:43,650 line:100% position:50% align:middle
here. So we've got a div with class of
keys and inside of that,

00:01:43.650 --> 00:01:48,250 line:100% position:50% align:middle
we've got a whole bunch of divs with a
class of key. Now, each of these keys here

00:01:48.250 --> 00:01:52,490 line:100% position:50% align:middle
obviously has like the clap, what sound
it's going to make as well as the key that

00:01:52.490 --> 00:01:57,140 line:100% position:50% align:middle
you should hit on your keyboard. But the
important thing here is that every key on

00:01:57.140 --> 00:02:02,510 line:100% position:50% align:middle
your keyboard when you press the up or the
down, when you key up or key down event,

00:02:02.510 --> 00:02:07,662 line:100% position:50% align:middle
there is going to be something called the
key code that is associated with that key.

00:02:07.662 --> 00:02:11,387 line:100% position:50% align:middle
Now, I've got a little website here I
whipped up a couple of years ago because I

00:02:11.387 --> 00:02:14,853 line:100% position:50% align:middle
always find myself searching for it and
it's called keycode.info and when you

00:02:14.853 --> 00:02:20,389 line:100% position:50% align:middle
press a key on your keyboard like escape
or space or A, it's going to have number

00:02:20.389 --> 00:02:24,686 line:100% position:50% align:middle
associated with that specific key on your
keyboard and this is the most consistent

00:02:25.230 --> 00:02:29,166 line:100% position:50% align:middle
way that I found across browser, cross
languages. It's not absolutely perfect

00:02:29.166 --> 00:02:35,044 line:100% position:50% align:middle
but it gets you most of the way for most
of your standard keys. When you click

00:02:35.044 --> 00:02:40,780 line:100% position:50% align:middle
or when you hit 65 like when you key up
and we're going to check if that was the A

00:02:40.780 --> 00:02:46,623 line:100% position:50% align:middle
key then we're going to play the
corresponding audio element that also has

00:02:46.623 --> 00:02:50,833 line:100% position:50% align:middle
the data-key. Now, what is this data dash
key? If you've never used a data

00:02:50.833 --> 00:02:55,922 line:100% position:50% align:middle
attributes before, this is not a standard.
You won't find this Googling anything,

00:02:55.922 --> 00:03:01,560 line:100% position:50% align:middle
anywhere you want. And essentially, data
attributes were brought about in HTML when

00:03:01.560 --> 00:03:05,890 line:100% position:50% align:middle
people were just making up their own
attributes. We have things like source and

00:03:05.890 --> 00:03:10,080 line:100% position:50% align:middle
class, and those are standards. And then
people just started making up their own

00:03:10.080 --> 00:03:13,000 line:100% position:50% align:middle
and the people who made HTML were like,
"whoa, whoa, whoa, chill out,

00:03:13.000 --> 00:03:17,360 line:100% position:50% align:middle
you can't just start adding shit like for
whatever you want." So we came up with

00:03:17.360 --> 00:03:21,880 line:100% position:50% align:middle
this idea of data attributes where if you
want to make up something like a key,

00:03:21.880 --> 00:03:26,250 line:100% position:50% align:middle
you have to put it behind a data-something
So what I'm doing here is I'm

00:03:26.250 --> 00:03:34,290 line:100% position:50% align:middle
using data attributes to hook up this, the
data key 65 along with the data key audio.

00:03:34.290 --> 00:03:37,450 line:100% position:50% align:middle
So that when someone hits the key on their
keyboard, we're going to find the audio

00:03:37.450 --> 00:03:42,810 line:100% position:50% align:middle
element and play it and we're going to
find the key div and we're going to add a

00:03:42.810 --> 00:03:47,010 line:100% position:50% align:middle
class of playing so it will animate itself
on in. So let's get started,

00:03:47.010 --> 00:03:50,940 line:100% position:50% align:middle
go over to our script tag here and the
first thing we need to do is just be

00:03:50.940 --> 00:03:57,520 line:100% position:50% align:middle
focused on listening for a key up event.
Now, the way that we do that is you first

00:03:57.520 --> 00:04:00,850 line:100% position:50% align:middle
get whatever element that you're
listening for and in our case,

00:04:00.850 --> 00:04:03,950 line:100% position:50% align:middle
I'm going to listen on the window.
Sometimes, you might want to listen on the

00:04:03.950 --> 00:04:08,440 line:100% position:50% align:middle
input or a div or a text area or something
like that. And we're going to add an event

00:04:08.440 --> 00:04:13,860 line:100% position:50% align:middle
listener. The event that we're
listening here is called key down.

00:04:13.860 --> 00:04:20,850 line:100% position:50% align:middle
And then next, we have a function which
will give us the event and inside of that,

00:04:20.850 --> 00:04:25,060 line:100% position:50% align:middle
we have nothing. And then I'm going to get
rid of the rest of this stuff here.

00:04:25.060 --> 00:04:30,830 line:100% position:50% align:middle
So we're going to listen for the key down
event and when that happens,

00:04:30.830 --> 00:04:34,360 line:100% position:50% align:middle
we're going to run this function which
will give us the event and I'm just going

00:04:34.360 --> 00:04:38,820 line:100% position:50% align:middle
to console log that event. Open up my
console, now whenever I press one of these

00:04:38.820 --> 00:04:43,000 line:100% position:50% align:middle
keys on the keyboard, you'll see that we
get this keyboard event, that's what E is.

00:04:43.000 --> 00:04:48,664 line:100% position:50% align:middle
The event is just the object full of data
describing what happened and it'll tell us

00:04:48.664 --> 00:04:53,841 line:100% position:50% align:middle
all kinds of info like what key was
actually hit. But the thing we're

00:04:53.841 --> 00:04:59,431 line:100% position:50% align:middle
concerned with here the key code, which is
the number that is associated with that

00:04:59.431 --> 00:05:02,980 line:100% position:50% align:middle
key, and that's essentially what all this
website is. When someone hits the key up,

00:05:02.980 --> 00:05:07,490 line:100% position:50% align:middle
we're just going to display the
corresponding number that you have.

00:05:07.490 --> 00:05:13,570 line:100% position:50% align:middle
So we go down here, we can log
e.keyCode and see what we've got.

00:05:13.570 --> 00:05:16,870 line:100% position:50% align:middle
Good, now we've got all these different...
If you hit spacebar, you can get 32.

00:05:16.870 --> 00:05:21,843 line:100% position:50% align:middle
If you hit escape, you're going to get 27.
Now what we need to do is say,

00:05:21.843 --> 00:05:29,386 line:100% position:50% align:middle
"is there an audio element on the page
that has a data dash key of 65?" And we're

00:05:29.480 --> 00:05:33,130 line:100% position:50% align:middle
going to use document.querySelector
because we're only looking for one.

00:05:33.130 --> 00:05:36,630 line:100% position:50% align:middle
If I was looking for many, I would say
query selector all but in our case it's

00:05:36.630 --> 00:05:41,190 line:100% position:50% align:middle
just query selector. And we're going to
listen for an audio, we're going to try to

00:05:41.190 --> 00:05:46,110 line:100% position:50% align:middle
select an audio element but we want to
select it where it has a data - key,

00:05:46.110 --> 00:05:49,450 line:100% position:50% align:middle
like there's no class on here. And
sometimes I see people say like,

00:05:49.450 --> 00:05:56,000 line:100% position:50% align:middle
"class=key-65" and they'll split it and
select something with a class of key 65.

00:05:56.000 --> 00:06:00,290 line:100% position:50% align:middle
That's a bit messy to me. I'd rather just
use its own data attribute here.

00:06:00.290 --> 00:06:04,070 line:100% position:50% align:middle
So we can use and attribute selector if
you've ever used this in CSS,

00:06:04.070 --> 00:06:09,000 line:100% position:50% align:middle
works the same in JavaScript. Attribute
selector say something like this,

00:06:09.000 --> 00:06:16,260 line:100% position:50% align:middle
"data-key=" and normally would say 65,
right? But that is going to be a variable

00:06:16.260 --> 00:06:19,200 line:100% position:50% align:middle
that lives inside of this event. So what
I'm going to do is I'm going to switch

00:06:19.200 --> 00:06:24,820 line:100% position:50% align:middle
these to back text and we're going to use
ES6 template strings which is dollar sign

00:06:24.820 --> 00:06:32,230 line:100% position:50% align:middle
curly brackets say "e.keyCode." Now, we
can console log audio and see if we have

00:06:32.230 --> 00:06:36,140 line:100% position:50% align:middle
selected an actual audio element. So I'm
going to refresh, I'm going to hit my A

00:06:36.140 --> 00:06:42,120 line:100% position:50% align:middle
button. No, we got an error,
audio(data-key=65) is not a valid

00:06:42.120 --> 00:06:47,720 line:100% position:50% align:middle
selector. What did we do here? I think we
need to pop a set of quotes around this

00:06:47.720 --> 00:06:54,426 line:100% position:50% align:middle
actual key here. Let's see if that works
for us. Hit A. There we go.

00:06:54.426 --> 00:07:00,628 line:100% position:50% align:middle
So it looks like you do need quotes around
your actual number here. Now when I hit

00:07:00.628 --> 00:07:05,380 line:100% position:50% align:middle
the key, and hit S, I'm going to
hit D. You see that we are getting the

00:07:05.380 --> 00:07:10,010 line:100% position:50% align:middle
corresponding audio element for that
specific key. Now sometimes we're going to

00:07:10.010 --> 00:07:14,680 line:100% position:50% align:middle
hit, I'm going ahead and hit Q. We get
null. Why do we get null?

00:07:14.680 --> 00:07:19,750 line:100% position:50% align:middle
That's because there is no audio element
associated with 81. So right away,

00:07:19.750 --> 00:07:24,140 line:100% position:50% align:middle
right there we can do is we can say if
there is no audio, if bang audio,

00:07:24.140 --> 00:07:30,900 line:100% position:50% align:middle
then we are just going to return. And that
would just stop the function from running

00:07:30.900 --> 00:07:35,920 line:100% position:50% align:middle
altogether. Okay, good, and that would
just stop it. Now what we can do since we

00:07:35.920 --> 00:07:46,820 line:100% position:50% align:middle
have this audio element, we can
play it. Let's try that. S, D, F.

00:07:46.820 --> 00:07:52,390 line:100% position:50% align:middle
Now it kind of works but here, hit F
over and over again, F, F, F, F.

00:07:52.390 --> 00:07:59,610 line:100% position:50% align:middle
I'm hitting it multiple times, but it
really only plays once every so often.

00:07:59.610 --> 00:08:04,170 line:100% position:50% align:middle
And that's because the open hat F, it
plays and it takes like maybe two or three

00:08:04.170 --> 00:08:09,430 line:100% position:50% align:middle
seconds to actually get to the end. And if
you call .play on an audio element

00:08:09.430 --> 00:08:13,000 line:100% position:50% align:middle
that is already playing, it won't play it
again because it's like,

00:08:13.000 --> 00:08:17,450 line:100% position:50% align:middle
"oh, why would I do that? I'm clearly
already playing with that." So what we

00:08:17.450 --> 00:08:21,770 line:100% position:50% align:middle
want to do before we do that is sort of
rewind it to the start of the element so

00:08:21.770 --> 00:08:24,570 line:100% position:50% align:middle
that if you hit it in succession over and
over again and over again,

00:08:24.570 --> 00:08:30,300 line:100% position:50% align:middle
it will just rewind it to the start. So
let's say "audio.currenTime=0." Now this

00:08:30.300 --> 00:08:38,310 line:100% position:50% align:middle
is going to rewind to the start. And now
if I just hammer on F,

00:08:38.310 --> 00:08:43,860 line:100% position:50% align:middle
you see we get it over and over again,
AAAA, SSS, DDD, FFF.

00:08:43.860 --> 00:08:46,880 line:100% position:50% align:middle
Good, playing over and over again. I'm
going to try some of the other keys on the

00:08:46.880 --> 00:08:50,670 line:100% position:50% align:middle
keyboard, nothing happens because we're
doing this check if there's no audio

00:08:50.670 --> 00:08:56,100 line:100% position:50% align:middle
element. Now, what we also need to do is
select the corresponding key that is with

00:08:56.100 --> 00:08:59,340 line:100% position:50% align:middle
it because we want to add that little
animation that we have here.

00:08:59.340 --> 00:09:04,820 line:100% position:50% align:middle
So let's say "const key=" and I going to
take this entire thing and switch it out

00:09:04.820 --> 00:09:09,930 line:100% position:50% align:middle
with a dot key. So instead of selecting an
audio element with the data dash key,

00:09:09.930 --> 00:09:14,560 line:100% position:50% align:middle
we could select a div or in our case,
something with the class of key but also

00:09:14.560 --> 00:09:20,740 line:100% position:50% align:middle
the data dash key. Now, let's go to the
bottom here and console log the actual key

00:09:20.740 --> 00:09:29,170 line:100% position:50% align:middle
element. Good, look these are the
corresponding key elements that we have,

00:09:29.170 --> 00:09:34,440 line:100% position:50% align:middle
and how do we get them to do that
cool little animation? Well,

00:09:34.440 --> 00:09:39,460 line:100% position:50% align:middle
again, if we go back to our style.CSS
we've got here, you see that I've already

00:09:39.460 --> 00:09:44,790 line:100% position:50% align:middle
styled the CSS and most of this does not
matter except the one line that we have

00:09:44.790 --> 00:09:51,960 line:100% position:50% align:middle
here that is transition all 0.07 seconds.
And when you add a class of playing to

00:09:51.960 --> 00:09:56,140 line:100% position:50% align:middle
that, we're going to scale it up, we're
going to change the border color and we're

00:09:56.140 --> 00:10:02,030 line:100% position:50% align:middle
going to change the box shadow color. So,
what we can do is we'll say,

00:10:02.030 --> 00:10:08,500 line:100% position:50% align:middle
"key.classList.add" and then we'll say
"playing." If you've never used this,

00:10:08.500 --> 00:10:12,229 line:100% position:50% align:middle
if you're just used to using jQuery,
that's the same thing as saying like

00:10:12.229 --> 00:10:18,179 line:100% position:50% align:middle
"key.addClass(playing)." Except we're not
using jQuery here, we're just using

00:10:18.179 --> 00:10:21,460 line:100% position:50% align:middle
Vanilla JavaScript, so that's the way
that you do it in Vanilla JavaScript.

00:10:21.460 --> 00:10:26,195 line:100% position:50% align:middle
You call .classList and then add.
Similarly, we also have .remove and we

00:10:26.195 --> 00:10:31,270 line:100% position:50% align:middle
have .toggle which will allow you to add
and remove the different classes that

00:10:31.270 --> 00:10:40,150 line:100% position:50% align:middle
you want. So let's see how that works
S, D, F. You see how it's adding them?

00:10:40.150 --> 00:10:45,410 line:100% position:50% align:middle
If you want to see how it works a little
bit slower, what you can do is go into

00:10:45.410 --> 00:10:51,220 line:100% position:50% align:middle
your CSS and change this, maybe let's make
the scale two and let's make the

00:10:51.220 --> 00:11:01,815 line:100% position:50% align:middle
transition 1.07 seconds. Now when I hit D,
you see over a second, F, G.

00:11:01.815 --> 00:11:06,460 line:100% position:50% align:middle
That's what's happening but because
we did it in such a short time span,

00:11:06.460 --> 00:11:13,070 line:100% position:50% align:middle
0.07 seconds, it just does it really,
really quickly and also,

00:11:13.070 --> 00:11:22,160 line:100% position:50% align:middle
we don't want to scale it up exactly that
much. Now, that works but why isn't it

00:11:22.160 --> 00:11:29,210 line:100% position:50% align:middle
going away? That's because we are adding
the class but we have not yet removed the

00:11:29.210 --> 00:11:33,470 line:100% position:50% align:middle
class. You might think, "oh, that's no
problem, we'll do like a set timeout here,

00:11:33.470 --> 00:11:42,890 line:100% position:50% align:middle
we'll run a function here and after 0.07
seconds." Well, that's okay but what tends

00:11:42.890 --> 00:11:49,160 line:100% position:50% align:middle
to happen if you have a timeout here as
well as you have a timeout in your CSS

00:11:49.160 --> 00:11:53,910 line:100% position:50% align:middle
JavaScript which is right here, they start
to get out of sync because maybe like a

00:11:53.910 --> 00:11:57,630 line:100% position:50% align:middle
designer comes around like, "its not quite
right, let's change that to like 0.9,

00:11:57.630 --> 00:12:02,080 line:100% position:50% align:middle
that feels a little bit better to me." And
then you have to go into the JavaScript to

00:12:02.080 --> 00:12:07,860 line:100% position:50% align:middle
make that that lines up as well. So rather
than like just setting a timer to do it,

00:12:07.860 --> 00:12:17,350 line:100% position:50% align:middle
what we can do is use a transition end
event that will fire when the thing has

00:12:17.350 --> 00:12:21,540 line:100% position:50% align:middle
stopped animating itself on in. Now, what
is the transition end event?

00:12:21.540 --> 00:12:26,590 line:100% position:50% align:middle
Well, let's take it back a second, what is
a click event? The click event is when you

00:12:26.590 --> 00:12:30,800 line:100% position:50% align:middle
click something and it will fire off the
event and say, "somebody clicked me." We

00:12:30.800 --> 00:12:36,080 line:100% position:50% align:middle
also have events in JavaScript that will
say, "I didn't get clicked but I was

00:12:36.080 --> 00:12:42,450 line:100% position:50% align:middle
transitioned, I transition myself from
scale 1 border black to scale 1.1 border

00:12:42.450 --> 00:12:47,910 line:100% position:50% align:middle
yellow." That's what we're going from here
which is the border black to here which

00:12:47.910 --> 00:12:55,170 line:100% position:50% align:middle
the border is that specific yellow. So
what we can do is we can listen on each

00:12:55.170 --> 00:12:59,630 line:100% position:50% align:middle
key for when the transition end event
happens. So let's do that.

00:12:59.630 --> 00:13:06,520 line:100% position:50% align:middle
First, let's go down here and we'll say
"const key=" now I need to select every

00:13:06.520 --> 00:13:09,820 line:100% position:50% align:middle
single key on the page because we want to
listen for it on each one.

00:13:09.820 --> 00:13:15,580 line:100% position:50% align:middle
So let's say "document.querySelector" and
we want query selector all, and we'll say

00:13:15.580 --> 00:13:19,500 line:100% position:50% align:middle
dot key. Now let's just see if I were to
run that in my console here,

00:13:19.500 --> 00:13:24,590 line:100% position:50% align:middle
let's see what that gives us. That gives
us an array of every single element that

00:13:24.590 --> 00:13:28,740 line:100% position:50% align:middle
is matched. Okay, good, then what we
want to do is we want to listen for

00:13:28.740 --> 00:13:35,530 line:100% position:50% align:middle
an event called transition end on each
one. So it's like "keys.forEach" and we're

00:13:35.530 --> 00:13:39,670 line:100% position:50% align:middle
going to get each key. If you're
wondering why do we have to this,

00:13:39.670 --> 00:13:44,890 line:100% position:50% align:middle
like why can't we just do
"keys.addEventListener" and listen for

00:13:44.890 --> 00:13:50,410 line:100% position:50% align:middle
transition end? And that's because if
you're used jQuery or anything like that,

00:13:50.410 --> 00:13:56,560 line:100% position:50% align:middle
the problem is when you have an array
of elements, you cannot listen on all of

00:13:56.560 --> 00:14:01,940 line:100% position:50% align:middle
them. You must explicitly loop over every
singly element and attach an event

00:14:01.940 --> 00:14:05,636 line:100% position:50% align:middle
listener. So, the way that I like to that
seems to be the simplest way for me is

00:14:05.636 --> 00:14:09,451 line:100% position:50% align:middle
you can say key. We use a little arrow
function here, if you've followed along in

00:14:09.451 --> 00:14:15,572 line:100% position:50% align:middle
my ES6 series, it's "key.addEventListener"
and then the listener that we're listening

00:14:15.572 --> 00:14:20,860 line:100% position:50% align:middle
for is transition end, and when that ends,
we are going to run a function called

00:14:20.860 --> 00:14:27,771 line:100% position:50% align:middle
"remove transition." Now we have to make
that. Now, let's just take a quick look

00:14:27.771 --> 00:14:32,956 line:100% position:50% align:middle
at here. So each key gets an event
listener added to it which is transition

00:14:32.956 --> 00:14:38,760 line:100% position:50% align:middle
end. And then when a transition is ending,
we will remove it. Now we need to actually

00:14:38.760 --> 00:14:45,210 line:100% position:50% align:middle
make that function here. So let's say
"function removeTransition" and that let's

00:14:45.210 --> 00:14:53,600 line:100% position:50% align:middle
give us the event. Inside of that, we'll
just console log the event just to see

00:14:53.600 --> 00:14:59,792 line:100% position:50% align:middle
what we're working with here. So, I'm
going to press A. Whoa, what happened

00:14:59.792 --> 00:15:05,520 line:100% position:50% align:middle
here? Okay, so we have one, two, three,
four, five, six transition end events for

00:15:05.520 --> 00:15:09,910 line:100% position:50% align:middle
that one little fade in where it got a
little bit bigger. And that's because a

00:15:09.910 --> 00:15:13,060 line:100% position:50% align:middle
whole bunch of things transitioned here.
The border right color transition,

00:15:13.060 --> 00:15:20,210 line:100% position:50% align:middle
all of the borders have transitioned. The
box shadow which is that little yellow

00:15:20.210 --> 00:15:25,430 line:100% position:50% align:middle
glow has transitioned. And then also,
the transform has finished.

00:15:25.430 --> 00:15:29,530 line:100% position:50% align:middle
Now, we don't really care about all of
these. We really just want to it when one

00:15:29.530 --> 00:15:34,540 line:100% position:50% align:middle
thing is over, generally the longest one.
So, let's pick the transform.

00:15:34.540 --> 00:15:40,630 line:100% position:50% align:middle
So, let's say "if E." and what was the
event we were looking for here

00:15:40.630 --> 00:15:48,530 line:100% position:50% align:middle
"event.propertyName." If it doesn't equal
transition then we will return.

00:15:48.530 --> 00:15:54,050 line:100% position:50% align:middle
And now we'll say "skip it if it's not a
transform." Transform,

00:15:54.050 --> 00:15:58,320 line:100% position:50% align:middle
not transition, I always mess them up.
Thank you for yelling at me through the

00:15:58.320 --> 00:16:03,500 line:100% position:50% align:middle
computer screen. Now, what's up next?
Let's just console log e.propertyName.

00:16:03.500 --> 00:16:09,920 line:100% position:50% align:middle
Let's see what we're working with here. So
we got this function that will run when a

00:16:09.920 --> 00:16:18,590 line:100% position:50% align:middle
transition has ended. You see what's
happening? It's console logging the word

00:16:18.590 --> 00:16:23,650 line:100% position:50% align:middle
transform because that is the property
that is being ended. Now,

00:16:23.650 --> 00:16:28,210 line:100% position:50% align:middle
that does it really quickly, but if I were
again to change this transform to 2.07

00:16:28.210 --> 00:16:36,860 line:100% position:50% align:middle
seconds and press A, one, two there we go.
It took seconds and then that's when it

00:16:36.860 --> 00:16:39,960 line:100% position:50% align:middle
ended. And coincidentally, why
coincidentally? That's why we want to do

00:16:39.960 --> 00:16:45,710 line:100% position:50% align:middle
it. When that happens, when it's done
moving itself in, we just want to reverse

00:16:45.710 --> 00:16:50,540 line:100% position:50% align:middle
everything that we know about that. So we
can head to our remove transition function

00:16:50.540 --> 00:16:54,220 line:100% position:50% align:middle
here and first of all, we'll save this.
Now what is this going to be equal to?

00:16:54.220 --> 00:16:58,440 line:100% position:50% align:middle
Well, if you are having a hard time
understanding what this is equal to

00:16:58.440 --> 00:17:02,956 line:100% position:50% align:middle
a really cheap and dirty way to understand
what this is equal to, well first you just

00:17:02.956 --> 00:17:07,600 line:100% position:50% align:middle
console log and see what it is.
That's a nice a way to find it out.

00:17:07.600 --> 00:17:13,840 line:100% position:50% align:middle
So, let me press A and then after two
seconds, I still have it on two seconds.

00:17:13.840 --> 00:17:18,670 line:100% position:50% align:middle
This is equal to the key, and why is that?
Because this is always equal to the

00:17:18.670 --> 00:17:22,410 line:100% position:50% align:middle
whatever got called against it. So add
event listener got called,

00:17:22.410 --> 00:17:27,090 line:100% position:50% align:middle
what got called against it, key.
So this is equal to the actual key.

00:17:27.090 --> 00:17:34,260 line:100% position:50% align:middle
So this, .classlist.remove we'll remove
the class of playing. Give that a save.

00:17:34.260 --> 00:17:37,630 line:100% position:50% align:middle
Now it's two seconds so I'm going
to hit it. Two seconds later,

00:17:37.630 --> 00:17:42,620 line:100% position:50% align:middle
transition end is going to fire which is
going to remove the transition of playing

00:17:42.620 --> 00:17:52,570 line:100% position:50% align:middle
and it should fade itself out. So, I'm
going to hit D, it's in and it's done

00:17:52.570 --> 00:17:59,530 line:100% position:50% align:middle
and it'll take the class off. If we
inspect that, watch it right here.

00:17:59.530 --> 00:18:03,310 line:100% position:50% align:middle
See, it's got a class of playing and then
two seconds later, it will remove it.

00:18:03.310 --> 00:18:09,880 line:100% position:50% align:middle
Now, if we go to our CSS and change
that back to 0.07 seconds,

00:18:09.880 --> 00:18:14,630 line:100% position:50% align:middle
it's just nice and quick, nice and quick,
nice and quick for all of those,

00:18:14.630 --> 00:18:18,260 line:100% position:50% align:middle
it went immediately. And the same thing
happens there if you were to add a class

00:18:18.260 --> 00:18:23,110 line:100% position:50% align:middle
of playing in div tools. It will still
remove it because the JavaScript is

00:18:23.110 --> 00:18:28,380 line:100% position:50% align:middle
listening on that element for when you
remove it. One last thing I want to do is

00:18:28.380 --> 00:18:34,420 line:100% position:50% align:middle
we go into our HTML. I'm never a big fan
of attaching these functions right to the

00:18:34.420 --> 00:18:39,590 line:100% position:50% align:middle
key down here, so what I want to do is put
these in its own function and it will call

00:18:39.590 --> 00:18:48,670 line:100% position:50% align:middle
that play sound. Let's say "function
playSound" and put all these logic inside

00:18:48.670 --> 00:18:56,860 line:100% position:50% align:middle
here and that is going to take in the
event which then bring down my event

00:18:56.860 --> 00:19:01,210 line:100% position:50% align:middle
listener down to the bottom here and we're
going to say when someone keys down

00:19:01.210 --> 00:19:08,054 line:100% position:50% align:middle
we're going to play the sound, that should
keep it for us. Still works fine

00:19:08.054 --> 00:19:11,427 line:100% position:50% align:middle
and that we've got them nice and separate
so that if I ever wanted to play the sound

00:19:11.427 --> 00:19:15,986 line:100% position:50% align:middle
based off on something else, I totally
could. So that is a basic JavaScript

00:19:15.986 --> 00:19:20,681 line:100% position:50% align:middle
Drum Kit. Again, the things we learned
about was key events as well as playing

00:19:20.681 --> 00:19:25,439 line:100% position:50% align:middle
audio as well listening for the transition
end event. Similarly, if you're also

00:19:25.439 --> 00:19:29,747 line:100% position:50% align:middle
dealing with animations, you can listen
for the animation end event, which works

00:19:29.747 --> 00:19:32,765 line:100% position:50% align:middle
exactly the same way. Thank you so much
and I'll see you in the next one.

00:19:32.863 --> 00:19:36,058 line:100% position:50% align:middle
♪ [music] ♪