

00:00:01.721 --> 00:00:04,611 line:100% position:50% align:middle
♪ [music] ♪

00:00:07.500 --> 00:00:11,950 line:100% position:50% align:middle
Today we are going to be making this super
snazzy, what I like to call a flex

00:00:11.950 --> 00:00:17,370 line:100% position:50% align:middle
gallery, and I really like this one
because it doesn't include all that much

00:00:17.370 --> 00:00:24,410 line:100% position:50% align:middle
JavaScript, and it leans heavily upon
CSS for flexbox, for transitions,

00:00:24.410 --> 00:00:28,890 line:100% position:50% align:middle
and for some events that CSS is going to
emit to us. So, this is really cool,

00:00:28.890 --> 00:00:32,780 line:100% position:50% align:middle
we're going to lean on CSS quite a bit.
Let's take a look at what we're starting

00:00:32.780 --> 00:00:33,730 line:100% position:50% align:middle
with here.

00:00:33.730 --> 00:00:37,550 line:100% position:50% align:middle
We've got this thing I like to call flex
panels, and if we scroll down to the HTML,

00:00:37.550 --> 00:00:42,570 line:100% position:50% align:middle
we've got a div with a class of panels,
and each of these panels is going to be

00:00:42.570 --> 00:00:47,840 line:100% position:50% align:middle
called a panel, singular. And then inside
of each of those panels is going to be,

00:00:47.840 --> 00:00:51,490 line:100% position:50% align:middle
"Hey," "Let's dance," "Give," "Take,"
"Receive." And these are going to be words

00:00:51.490 --> 00:00:55,320 line:100% position:50% align:middle
that, when clicked, they're going to grow
in size, as well as they're going to fall

00:00:55.320 --> 00:00:57,414 line:100% position:50% align:middle
from the top and come up from the bottom.

00:00:57.414 --> 00:01:01,550 line:100% position:50% align:middle
So, what I want to start to do is I've
given you some CSS if we open this up in

00:01:01.550 --> 00:01:05,810 line:100% position:50% align:middle
the browser now. You see, we start with
some CSS that looks, but it doesn't do

00:01:05.810 --> 00:01:09,230 line:100% position:50% align:middle
anything and it actually is not in the
right place. So, I wanted to write the

00:01:09.230 --> 00:01:12,270 line:100% position:50% align:middle
actual important part, which is the
flexbox piece with you, as well.

00:01:12.270 --> 00:01:18,170 line:100% position:50% align:middle
Let's go up to our CSS, and first of all,
we need to get our panels going side by

00:01:18.170 --> 00:01:22,370 line:100% position:50% align:middle
side. So if we go the panels div, you do
display: flex on them,

00:01:22.370 --> 00:01:27,300 line:100% position:50% align:middle
and by the way, if you are new to flexbox,
I have an entire series at flexbox.io

00:01:27.300 --> 00:01:31,210 line:100% position:50% align:middle
that you can visit, and that will guide
you through, similar to this one,

00:01:31.210 --> 00:01:35,950 line:100% position:50% align:middle
as well. And when I make those flex
they're going to go side by side by side

00:01:35.950 --> 00:01:39,010 line:100% position:50% align:middle
by side, and just stick them all there.

00:01:39.010 --> 00:01:43,110 line:100% position:50% align:middle
Next, what we need to do is we need to go
to each of the individual panels and tell

00:01:43.110 --> 00:01:49,790 line:100% position:50% align:middle
them, "Okay, well this is as much room as
the flex-child needs." It's as big as the

00:01:49.790 --> 00:01:52,560 line:100% position:50% align:middle
words are, so this one is the biggest
because it has the biggest word,

00:01:52.560 --> 00:01:56,560 line:100% position:50% align:middle
"experience." But what we want to tell it
to do is that we've got all this extra

00:01:56.560 --> 00:02:01,350 line:100% position:50% align:middle
space here, "Why don't you split it
amongst yourselves, children?"

00:02:01.350 --> 00:02:06,670 line:100% position:50% align:middle
So we go to our panel and we simply just
say flex: 1, and what that means is that

00:02:06.670 --> 00:02:11,690 line:100% position:50% align:middle
each of them are going to evenly
distribute the extra space among each

00:02:11.690 --> 00:02:15,350 line:100% position:50% align:middle
other. And that 1 might not make sense,
but we're going to come back to that in

00:02:15.350 --> 00:02:21,820 line:100% position:50% align:middle
just a second, so believe me. There we go.
Okay, so flex of 1 will make them evenly

00:02:21.820 --> 00:02:27,330 line:100% position:50% align:middle
distribute the extra space in between
them, so I'm pretty happy with that.

00:02:27.330 --> 00:02:33,160 line:100% position:50% align:middle
Now, let's move on to each of the panels
and get them visually looking like this,

00:02:33.160 --> 00:02:38,950 line:100% position:50% align:middle
where the items are going to be centered
in thirds. So we're going to go to our

00:02:38.950 --> 00:02:44,200 line:100% position:50% align:middle
panel here, and first of all, just put a
border: 1px solid red on it,

00:02:44.200 --> 00:02:47,670 line:100% position:50% align:middle
just so that we can see what's going on
here. Visually, I think this will really

00:02:47.670 --> 00:02:51,720 line:100% position:50% align:middle
help us. So, what's going on here? We've
got each of these panels...oh,

00:02:51.720 --> 00:02:57,240 line:100% position:50% align:middle
we don't want to put the border on each of
the panels, sorry. We want to put the

00:02:57.240 --> 00:03:03,350 line:100% position:50% align:middle
border on each of the flex items or the
flex children, which is here .panel > *.

00:03:03.350 --> 00:03:07,180 line:100% position:50% align:middle
Let's put a border there just so we can
see what's going on here.

00:03:09.491 --> 00:03:13,900 line:100% position:50% align:middle
Okay, so these are our three items. Now, I
want them to...again,

00:03:13.900 --> 00:03:19,970 line:100% position:50% align:middle
I have all of extra work vertically, how
do I get them to go up and down?

00:03:19.970 --> 00:03:27,760 line:100% position:50% align:middle
So we'll go back to our panel here and
we'll say justify-content: center.

00:03:27.760 --> 00:03:32,900 line:100% position:50% align:middle
Where does that get us? That gets them
centered left to right. I want to say

00:03:32.900 --> 00:03:40,660 line:100% position:50% align:middle
align-items: center, which still won't get
us much, but we also need to make this

00:03:40.660 --> 00:03:47,230 line:100% position:50% align:middle
panel here display: flex. And this is a
really good example of when you will nest

00:03:47.230 --> 00:03:52,730 line:100% position:50% align:middle
flexbox, because... Let's take a pause for
a second. What is the flex container here?

00:03:52.730 --> 00:03:59,210 line:100% position:50% align:middle
Panels. What is the flex item? Panel. But
we're also going to make panel a flex

00:03:59.210 --> 00:04:05,310 line:100% position:50% align:middle
container. An element in CSS can be both a
flex item, which it is right here,

00:04:05.310 --> 00:04:11,350 line:100% position:50% align:middle
as well as a flex container, which we are
going to do by making it display: flex.

00:04:11.350 --> 00:04:15,840 line:100% position:50% align:middle
So by doing that, we stack them left to
right, because that's the default of

00:04:15.840 --> 00:04:21,960 line:100% position:50% align:middle
flexbox. We want to change that and we are
going to say flex-direction: column,

00:04:21.960 --> 00:04:26,270 line:100% position:50% align:middle
and that will vertically center them in
the middle, but then I also want each of

00:04:26.270 --> 00:04:30,800 line:100% position:50% align:middle
these items to take up one-third, and
that's just exactly what we've done.

00:04:30.800 --> 00:04:35,901 line:100% position:50% align:middle
So let's scroll down to our flex children,
our flex items, and we already put a

00:04:35.901 --> 00:04:45,930 line:100% position:50% align:middle
border on it and here we're going to flex:
1 0 auto, and that will give us these

00:04:45.930 --> 00:04:52,340 line:100% position:50% align:middle
here. And we want to display: flex on
that, as well, which doesn't do too much

00:04:52.340 --> 00:04:56,157 line:100% position:50% align:middle
except bring the text to the left. But if
we do justify-content: center and

00:04:56.157 --> 00:05:03,370 line:100% position:50% align:middle
align-items: center. Now we've got
everything perfectly centered.

00:05:03.370 --> 00:05:07,970 line:100% position:50% align:middle
This is just a lot of flexbox nested and
nested and nested, which allows us to get

00:05:07.970 --> 00:05:09,786 line:100% position:50% align:middle
this really cool layout.

00:05:09.786 --> 00:05:15,330 line:100% position:50% align:middle
Okay, so looking pretty good to me so far.
Now, what I want to do is I want to hide

00:05:15.330 --> 00:05:20,910 line:100% position:50% align:middle
"give," all the way up, and I want to take
"you can," and "today," and "receive," and

00:05:20.910 --> 00:05:26,890 line:100% position:50% align:middle
hide them all the way down. So what we're
going to use is translateY for that.

00:05:26.890 --> 00:05:34,940 line:100% position:50% align:middle
Let's go down right here. I'm going to say
.panel > *:first-child is going to be

00:05:34.940 --> 00:05:46,343 line:100% position:50% align:middle
transform: translateY(-100%). So each of
the first children are going to be -100%.

00:05:46.343 --> 00:05:54,817 line:100% position:50% align:middle
Okay, so that puts them off-screen, and
then the last-child is going to be 100%.

00:05:54.817 --> 00:06:00,351 line:100% position:50% align:middle
The idea that we're going for here is that
when you take off this translateY,

00:06:00.351 --> 00:06:03,370 line:100% position:50% align:middle
it's going to animate itself. See what
it's doing? It's going to transition

00:06:03.370 --> 00:06:09,120 line:100% position:50% align:middle
itself in and out, in and out, in and out.
And the way that that's going to work is

00:06:09.120 --> 00:06:17,800 line:100% position:50% align:middle
that when the panel has a class of
open-active, we are going to

00:06:17.800 --> 00:06:26,370 line:100% position:50% align:middle
translateY(0). And when the panel has a
class of open-active, we are going to take

00:06:26.370 --> 00:06:33,640 line:100% position:50% align:middle
the last-child and translateY(0), as well.
So, what that means is that if we take any

00:06:33.640 --> 00:06:39,236 line:100% position:50% align:middle
one of these panels, and add a class of
open-active, it will animate itself in

00:06:39.236 --> 00:06:45,910 line:100% position:50% align:middle
take it off, and they go away. So you
can take the border away if you sort of

00:06:45.910 --> 00:06:50,390 line:100% position:50% align:middle
get it now, where the elements are on the
page. I think we've got a pretty good idea

00:06:50.390 --> 00:06:54,810 line:100% position:50% align:middle
of visualizing it. So that is
what we've got so far.

00:06:54.810 --> 00:06:59,280 line:100% position:50% align:middle
The last bit of the puzzle is that when
these panels also have a class of open,

00:07:00.051 --> 00:07:04,140 line:100% position:50% align:middle
what's going to happen is that it needs to
get bigger. You see that the font-size

00:07:04.140 --> 00:07:09,510 line:100% position:50% align:middle
already changed, but when the panel has a
class of open, scroll down to line 85 or

00:07:09.510 --> 00:07:13,860 line:100% position:50% align:middle
so, we want to give it a flex of 5. And,
now, what does that mean?

00:07:13.860 --> 00:07:19,020 line:100% position:50% align:middle
Well, earlier we said a flex of 1
means that each of them are going to

00:07:19.020 --> 00:07:23,350 line:100% position:50% align:middle
evenly distribute the extra room.
So by giving it a flex of 5,

00:07:23.350 --> 00:07:28,370 line:100% position:50% align:middle
what that means is that when it has a
class of open, it's going to take 5 times

00:07:28.370 --> 00:07:34,540 line:100% position:50% align:middle
the amount of extra room as the rest of
them, because they are regular flex of 1.

00:07:34.540 --> 00:07:39,590 line:100% position:50% align:middle
And now we are having a flex of 5, and
that means it should just grow a little

00:07:39.590 --> 00:07:44,940 line:100% position:50% align:middle
bit bigger. So if I go to one of my panels
here, give it a class of open,

00:07:44.940 --> 00:07:50,700 line:100% position:50% align:middle
you see that it will animate itself in,
take it away, animate itself out.

00:07:50.890 --> 00:07:55,380 line:100% position:50% align:middle
I keep saying "animate", I mean
"transition", and why that's happening is

00:07:55.380 --> 00:08:00,000 line:100% position:50% align:middle
because of this. The panel has a
transition in which we are transitioning

00:08:00.000 --> 00:08:05,959 line:100% position:50% align:middle
the font-size over 0.7 seconds, and we're
using these cubic-beziers that we've done

00:08:05.959 --> 00:08:10,180 line:100% position:50% align:middle
in previous classes. And what that
does is allows us to get this cool,

00:08:10.180 --> 00:08:13,352 line:100% position:50% align:middle
like, open and close where it goes a
little bit bigger and a little bit smaller

00:08:13.352 --> 00:08:19,120 line:100% position:50% align:middle
than it should, then snaps back into
place. Now that we've got all of the CSS

00:08:19.120 --> 00:08:21,890 line:100% position:50% align:middle
in place, we really just have to write a
little bit of JavaScript so that when we

00:08:21.890 --> 00:08:25,760 line:100% position:50% align:middle
click them, it will do that adding and
removing of classes. So first we want to

00:08:25.760 --> 00:08:31,410 line:100% position:50% align:middle
grab all the panels. Make sure that that's
querySelectorAll, not querySelector,

00:08:31.410 --> 00:08:35,820 line:100% position:50% align:middle
and that will give us a node list of all
the different ones that we have.

00:08:35.820 --> 00:08:40,900 line:100% position:50% align:middle
And then we want to write a function
that's going to toggle that class of on or

00:08:40.900 --> 00:08:48,740 line:100% position:50% align:middle
open. So function toggleOpen(). So
this.classList.toggle('open').

00:08:48.740 --> 00:08:52,761 line:100% position:50% align:middle
And then on each of the panels
we're going to listen for a click.

00:08:53.647 --> 00:08:57,870 line:100% position:50% align:middle
Good. So we're going to take each of the
panels, loop over each one of them,

00:08:57.870 --> 00:09:02,710 line:100% position:50% align:middle
listen for a click on each one of them,
and then run the toggle function when it

00:09:02.710 --> 00:09:06,680 line:100% position:50% align:middle
is run. Often I have people ask me, "Why
isn't it toggleOpen like that?" Because

00:09:06.680 --> 00:09:10,830 line:100% position:50% align:middle
that would run on page load. What we want
to do here is we don't want to run the

00:09:10.830 --> 00:09:13,750 line:100% position:50% align:middle
function. We just want to give it
reference to the function and say,

00:09:13.750 --> 00:09:17,800 line:100% position:50% align:middle
"Hey, when someone clicks me, make sure
that you go find this function and run

00:09:17.800 --> 00:09:23,740 line:100% position:50% align:middle
it." So, let's see where we're at right
now. Oh, we've got a bit of an error here.

00:09:23.740 --> 00:09:29,450 line:100% position:50% align:middle
Missing a parenthesis on line 133, got it.
Doesn't seem to be working,

00:09:29.450 --> 00:09:37,150 line:100% position:50% align:middle
let's debug this real
quick.console.log('Hello'). There we go.

00:09:37.150 --> 00:09:42,110 line:100% position:50% align:middle
Hello, hello, hello. Why is it not
toggling the class of open?

00:09:42.110 --> 00:09:49,480 line:100% position:50% align:middle
Oh, I see the error here. It's because we
are listening on each individual panel,

00:09:49.480 --> 00:09:55,540 line:100% position:50% align:middle
singular, not all the panels. Now, when I
click it, it's going to add a class of

00:09:55.540 --> 00:10:00,392 line:100% position:50% align:middle
open to that specific panel, and
remove that class. Add that class

00:10:00.392 --> 00:10:01,559 line:100% position:50% align:middle
and remove that class.

00:10:01.559 --> 00:10:07,540 line:100% position:50% align:middle
Now, the second step is that once this has
finished transitioning itself open,

00:10:07.540 --> 00:10:11,670 line:100% position:50% align:middle
that's when I want to bring in the word
from the top and bring in the word from

00:10:11.670 --> 00:10:15,410 line:100% position:50% align:middle
the bottom. So, in a previous exercise,
what we did is we listened for the

00:10:15.410 --> 00:10:18,950 line:100% position:50% align:middle
transition end event, which is exactly
what we're going to do here.

00:10:18.950 --> 00:10:22,360 line:100% position:50% align:middle
Go down to your panels and just duplicate
that line. We're going to listen for the

00:10:22.360 --> 00:10:28,010 line:100% position:50% align:middle
transition end event, and we're going to
toggle class of open-active with a

00:10:28.010 --> 00:10:31,620 line:100% position:50% align:middle
function called toggleActive .
So let's go up here and write that,

00:10:31.620 --> 00:10:36,300 line:100% position:50% align:middle
and we'll say...normally, what
we'd do is we would say

00:10:36.300 --> 00:10:43,570 line:100% position:50% align:middle
this.classList.toggle('open-active'),
however, there is going to be multiple

00:10:43.570 --> 00:10:48,340 line:100% position:50% align:middle
transition end events being fired, and
I'll show you how to figure that out.

00:10:48.340 --> 00:10:51,780 line:100% position:50% align:middle
We pass the event to this,
comment that out for now, and

00:10:51.780 --> 00:10:59,502 line:100% position:50% align:middle
console.log(e.propertyName).
Let's see what we got here.

00:11:00.380 --> 00:11:04,650 line:100% position:50% align:middle
So I'm going to click on one of these,
which is going to trigger a transition.

00:11:04.650 --> 00:11:08,223 line:100% position:50% align:middle
When that transition is finished, it's
going to tell us what transitioned.

00:11:09.710 --> 00:11:15,120 line:100% position:50% align:middle
Oh, font-size and flex-grow. So two things
are being transitioned here.

00:11:15.120 --> 00:11:20,300 line:100% position:50% align:middle
Why? Because if you look at our CSS, when
the panel is open, we are transitioning

00:11:20.300 --> 00:11:24,490 line:100% position:50% align:middle
the flex and the font-size. Both of those
things are getting bigger when the class

00:11:24.490 --> 00:11:29,970 line:100% position:50% align:middle
of open. And really, we only care about
the flex-grow here, so what we can do is

00:11:29.970 --> 00:11:36,480 line:100% position:50% align:middle
we say if (e.propertyName). And
normally we'd say flex-grow, however,

00:11:36.480 --> 00:11:42,320 line:100% position:50% align:middle
I did find some bugs in Safari, where in
Safari it's just flex and in the rest of

00:11:42.320 --> 00:11:47,840 line:100% position:50% align:middle
the browsers it's flex-grow. So even
though if you scroll up here,

00:11:47.840 --> 00:11:53,450 line:100% position:50% align:middle
we have explicitly stated that we are
working with flex here, some of the

00:11:53.450 --> 00:11:57,630 line:100% position:50% align:middle
browsers tell it's flex-grow, some of the
them tell it as flex. So what we need to

00:11:57.630 --> 00:12:02,300 line:100% position:50% align:middle
do is just cover both of our bases, and
rather than checking if it's explicitly

00:12:02.300 --> 00:12:08,820 line:100% position:50% align:middle
flex-grow, we'll see if it includes the
word flex, and if that is true,

00:12:08.820 --> 00:12:12,651 line:100% position:50% align:middle
then we will toggle the
class of open-active.

00:12:13.570 --> 00:12:19,460 line:100% position:50% align:middle
So, again, what's happening here? We are
listening for a click on each panel.

00:12:19.460 --> 00:12:22,730 line:100% position:50% align:middle
When someone clicks we're going
to open it. That's going to then,

00:12:22.730 --> 00:12:28,180 line:100% position:50% align:middle
in turn, trigger a CSS open and when
that finishes, the second one,

00:12:28.180 --> 00:12:31,910 line:100% position:50% align:middle
transition end will fire, and that's when
we're going to toggle open-active.

00:12:31.910 --> 00:12:35,980 line:100% position:50% align:middle
And then it will just go the other way
when you click it off, as well.

00:12:35.980 --> 00:12:41,170 line:100% position:50% align:middle
Here we go, open it up and they animate
itself in from the sky and down from the

00:12:41.170 --> 00:12:46,420 line:100% position:50% align:middle
bottom and then you close it up and
they open themselves up, and close.

00:12:46.420 --> 00:12:50,090 line:100% position:50% align:middle
So this is pretty cool when you open up
multiple... What I really like about this

00:12:50.090 --> 00:12:53,810 line:100% position:50% align:middle
is you do not have to specify a
width for this specific gallery,

00:12:53.810 --> 00:12:58,140 line:100% position:50% align:middle
because if each of them have a flex of 5
they will simply each take a little bit

00:12:58.140 --> 00:13:02,200 line:100% position:50% align:middle
less of the extra room. If one of them,
it's going to take a lot more.

00:13:02.200 --> 00:13:04,229 line:100% position:50% align:middle
Hopefully, you liked that.
I'll see you in the next one.

00:13:05.009 --> 00:13:08,672 line:100% position:50% align:middle
♪ [music] ♪