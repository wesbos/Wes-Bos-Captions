

00:00:00.000 --> 00:00:03,402 line:100% position:50% align:middle
♪ [music] ♪

00:00:07.581 --> 00:00:09,918 line:100% position:50% align:middle
Today is Array Cardio day two, where we're

00:00:09.918 --> 00:00:13,630 line:100% position:50% align:middle
going to learn about a few new array
methods that come in handy when you're

00:00:13.630 --> 00:00:18,170 line:100% position:50% align:middle
working with data. So we've got two arrays
here with some people and some comments,

00:00:18.170 --> 00:00:22,380 line:100% position:50% align:middle
and first, we're going to learn about
.some and .every. .some will check if at

00:00:22.380 --> 00:00:28,760 line:100% position:50% align:middle
least one thing in your array meets what
you're looking for. So,

00:00:28.760 --> 00:00:35,070 line:100% position:50% align:middle
we will say const
is_adult = and call .some against it. Now

00:00:35.070 --> 00:00:40,040 line:100% position:50% align:middle
.some will take a function that will check
it for every single one that we have.

00:00:40.040 --> 00:00:46,900 line:100% position:50% align:middle
That's going to give us our person and we
will say if person.year...and now we need

00:00:46.900 --> 00:00:52,360 line:100% position:50% align:middle
like the current year, so you could take
the current year and minus that or what we

00:00:52.360 --> 00:01:01,770 line:100% position:50% align:middle
could do is we could say const
current_year =

00:01:01.770 --> 00:01:11,637 line:100% position:50% align:middle
new_date.get_full_year(). Say if
current_year - person.year >= 19,

00:01:11.637 --> 00:01:18,494 line:100% position:50% align:middle
then return true, and what that should do
if we console.log is_adult is give us true

00:01:18.494 --> 00:01:21,551 line:100% position:50% align:middle
because there is someone who is greater or
equal to. There we go.

00:01:21.551 --> 00:01:25,272 line:100% position:50% align:middle
Little thing you can do in console.log is
if you can pop curly brackets around it,

00:01:25.272 --> 00:01:29,696 line:100% position:50% align:middle
it's going to show you the name of the
variable as well as the value.

00:01:29.696 --> 00:01:33,273 line:100% position:50% align:middle
So the is_adult is going to
be equal to true. That makes sense.

00:01:33.273 --> 00:01:36,220 line:100% position:50% align:middle
Now we can make this a lot
simpler. I'm going to rewrite it

00:01:36.220 --> 00:01:45,560 line:100% position:50% align:middle
here.const is_adult = people.some(person)
and from that, we'll have a block and we

00:01:45.560 --> 00:01:53,640 line:100% position:50% align:middle
need the current year again and then we
can simply return current_year -

00:01:53.640 --> 00:01:59,870 line:100% position:50% align:middle
person.year >= 19, and that's going to be
a lot simpler than if writing it like

00:01:59.870 --> 00:02:02,120 line:100% position:50% align:middle
this. I think it
reads a little bit nicer. We used an arrow

00:02:02.120 --> 00:02:07,880 line:100% position:50% align:middle
function here, and we return the current
year. You want to be a total hotshot,

00:02:07.880 --> 00:02:14,260 line:100% position:50% align:middle
you could take this entire thing, pop it
in some parentheses here,

00:02:14.260 --> 00:02:22,710 line:100% position:50% align:middle
get rid of that, and then use the implicit
return without the curly brackets here.

00:02:22.710 --> 00:02:27,310 line:100% position:50% align:middle
Hotshot. That would do the same thing.
Let's save it. I would have to comment

00:02:27.310 --> 00:02:30,850 line:100% position:50% align:middle
this one out so we don't duplicate the
variable. You still get

00:02:30.850 --> 00:02:35,350 line:100% position:50% align:middle
true in there. All right, let's do the
next one which is going to be .every().

00:02:35.350 --> 00:02:40,290 line:100% position:50% align:middle
So is everybody 19. So we can simply just
take this, what we've done here,

00:02:40.290 --> 00:02:48,230 line:100% position:50% align:middle
and replace it with .every(), and then
const all_adults. So log adults,

00:02:48.230 --> 00:02:52,270 line:100% position:50% align:middle
and that's going to give us false. Why is
that giving us false?

00:02:52.270 --> 00:02:57,060 line:100% position:50% align:middle
Because not every single item in the array
is going to meet our criteria.

00:02:57.060 --> 00:03:00,050 line:100% position:50% align:middle
So, .some() will check if one, .every()
will check

00:03:00.050 --> 00:03:04,910 line:100% position:50% align:middle
for every single one of them. Next up, we
have array.prototype.find() and .find() is

00:03:04.910 --> 00:03:09,890 line:100% position:50% align:middle
kind of like .filter() but instead of
returning you a subset of the array,

00:03:09.890 --> 00:03:14,120 line:100% position:50% align:middle
it's going to return you the first item
that it finds. So we want to find the

00:03:14.120 --> 00:03:22,430 line:100% position:50% align:middle
comment with the id of 823423. So say
const comment = and we'll take this

00:03:22.430 --> 00:03:28,530 line:100% position:50% align:middle
comments array. We'll call .find() on it
and we will run a function against it

00:03:28.530 --> 00:03:35,820 line:100% position:50% align:middle
which will give us the comment
and we'll say if comment.id, I believe

00:03:35.820 --> 00:03:46,680 line:100% position:50% align:middle
it is. Let's double check that. There we
go. Comment.id = that...is it a string?

00:03:46.680 --> 00:03:53,920 line:100% position:50% align:middle
No, it's a number...then return true. And
then we should be able to console.log() a

00:03:53.920 --> 00:04:00,240 line:100% position:50% align:middle
comment. Good. We've got that one specific
comment, this is "super good." Now take

00:04:00.240 --> 00:04:05,030 line:100% position:50% align:middle
a second, pause the video, try and convert
this to a arrow function with an implicit

00:04:05.030 --> 00:04:09,490 line:100% position:50% align:middle
return. So what we could do instead is
const comment...

00:04:09.490 --> 00:04:18,610 line:100% position:50% align:middle
whoa, comment, there we go... comments.
find(comment), and then we simply just

00:04:18.610 --> 00:04:25,260 line:100% position:50% align:middle
return this bit right here. And because
that is going to be true or false,

00:04:25.260 --> 00:04:29,110 line:100% position:50% align:middle
we don't need to have an if statement,
because it's just going to return a

00:04:29.110 --> 00:04:34,760 line:100% position:50% align:middle
Boolean of true or false, and then that is
a nice one-liner, rather than having to do

00:04:34.760 --> 00:04:39,610 line:100% position:50% align:middle
it in that long, and then that should
still work exactly the same.

00:04:39.610 --> 00:04:45,600 line:100% position:50% align:middle
Good. Next up, and finally, we have
.find_index() which is going to find where

00:04:45.600 --> 00:04:49,710 line:100% position:50% align:middle
something is inside of the array. Let's
say I wanted to delete one of these,

00:04:49.710 --> 00:04:54,320 line:100% position:50% align:middle
but in order to delete something from an
array, you need to know where in the array

00:04:54.320 --> 00:05:01,600 line:100% position:50% align:middle
it actually is. So if we've only got this
id, we can say const index = comments.

00:05:01.600 --> 00:05:05,600 line:100% position:50% align:middle
find_index(), and then we'd do the
exact same thing we did before.

00:05:05.600 --> 00:05:12,090 line:100% position:50% align:middle
Comment is equal to that, and if we
console. log() the index, it'll tell us

00:05:12.090 --> 00:05:17,847 line:100% position:50% align:middle
that it is one which should mean it is the
second item in our array. There we go.

00:05:17.847 --> 00:05:20,850 line:100% position:50% align:middle
Now, how do you delete it? Well, there's
two ways you could delete it from the

00:05:20.850 --> 00:05:26,450 line:100% position:50% align:middle
array. We could simply just say comments.
splice(). We could start at the index and

00:05:26.450 --> 00:05:33,280 line:100% position:50% align:middle
go for one. Let's take a look at what
we've got here if we type in comments now.

00:05:33.280 --> 00:05:38,580 line:100% position:50% align:middle
Console.table() our comments. You see
that the "super good" comment is totally

00:05:38.580 --> 00:05:44,190 line:100% position:50% align:middle
gone, or what you could also do, and this
is very popular in the Redux world,

00:05:44.190 --> 00:05:48,030 line:100% position:50% align:middle
is you create a new array of the updated
comments, where you would say something

00:05:48.030 --> 00:05:56,940 line:100% position:50% align:middle
like const new_comments = an array, and
what you do is you just take a copy of the

00:05:56.940 --> 00:06:05,850 line:100% position:50% align:middle
comments before it. So we say comments.
slice(). We start at zero and we go until

00:06:05.850 --> 00:06:12,650 line:100% position:50% align:middle
the index, and then we start at the index
plus one and go until the end.

00:06:12.650 --> 00:06:16,580 line:100% position:50% align:middle
So, you don't pass it anything, and that's
just going to build a new array of the

00:06:16.580 --> 00:06:21,956 line:100% position:50% align:middle
comments. So if I console.table() the
comments, good. Console.table

00:06:21.956 --> 00:06:30,360 line:100% position:50% align:middle
(new_comments). Oh, what did we
forget here? It gave us an array of two

00:06:30.360 --> 00:06:37,880 line:100% position:50% align:middle
arrays, so what's wrong with this? It's
because we did not spread the items into

00:06:37.880 --> 00:06:41,380 line:100% position:50% align:middle
the new array. And again, if this is not
making sense to you, feel free to stick

00:06:41.380 --> 00:06:47,020 line:100% position:50% align:middle
with your splice, or go back into my ES6
videos and check out the spread operator

00:06:47.020 --> 00:06:51,690 line:100% position:50% align:middle
ones. So if we console.table() the new
comments, that one's gone.

00:06:51.690 --> 00:06:59,680 line:100% position:50% align:middle
However, we still have the original
comments array where it says "super good."

00:06:59.680 --> 00:07:03,420 line:100% position:50% align:middle
So that's just a couple more array methods
that you should keep in your back pocket.

00:07:03.420 --> 00:07:07,160 line:100% position:50% align:middle
Knowing all of the possible array methods
and when to use them can come in really

00:07:07.160 --> 00:07:09,727 line:100% position:50% align:middle
handy when you're massaging your data.

00:07:09.727 --> 00:07:12,727 line:100% position:50% align:middle
♪ [music] ♪