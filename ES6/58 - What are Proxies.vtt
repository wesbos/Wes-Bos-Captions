WEBVTT

1
00:00:02.380 --> 00:00:02.820
 Instructor: Proxies 

2
00:00:02.820 --> 00:00:04.170
allow you to overwrite the 

3
00:00:04.170 --> 00:00:06.510
default behavior for many of an 

4
00:00:06.585 --> 00:00:08.290
object's default operations. 

5
00:00:08.380 --> 00:00:10.110
What I mean by that is, an 

6
00:00:10.120 --> 00:00:11.630
object you can get things, you 

7
00:00:11.640 --> 00:00:13.120
can set things, you can check if 

8
00:00:13.130 --> 00:00:14.570
it has an item, you can delete a 

9
00:00:14.580 --> 00:00:15.800
property. There's a whole 

10
00:00:15.810 --> 00:00:17.490
bunch of methods that come along 

11
00:00:17.500 --> 00:00:19.800
with a default object. What if 

12
00:00:19.810 --> 00:00:21.820
you wanted to overwrite these? 

13
00:00:21.830 --> 00:00:22.940
We've looked previously at 

14
00:00:22.950 --> 00:00:24.220
custom setters and getters, 

15
00:00:24.230 --> 00:00:25.670
which are actually not part of 

16
00:00:25.680 --> 00:00:27.870
the ES6, but what if you wanted 

17
00:00:27.880 --> 00:00:29.060
to overwrite absolutely 

18
00:00:29.060 --> 00:00:30.050
everything, or what if you 

19
00:00:30.060 --> 00:00:32.120
wanted to overwrite some of the 

20
00:00:32.130 --> 00:00:34.740
other properties in an object? 

21
00:00:35.400 --> 00:00:36.870
That's what proxies do. They 

22
00:00:36.880 --> 00:00:38.160
allow you to overwrite the 

23
00:00:38.170 --> 00:00:41.580
default behavior of an operation 

24
00:00:41.590 --> 00:00:43.430
on an object. To explain 

25
00:00:43.440 --> 00:00:45.410
that, let's take a look here. 

26
00:00:45.420 --> 00:00:47.680
Let's say we have a person that 

27
00:00:47.690 --> 00:00:50.130
is equal to, let's say name is 

28
00:00:50.140 --> 00:00:54.720
Wes, and age is 100. When I get 

29
00:00:54.730 --> 00:00:56.130
the name, let's say I wanted to 

30
00:00:56.140 --> 00:00:59.010
return something other than Wes. 

31
00:00:59.260 --> 00:01:01.300
What we can do is create a proxy 

32
00:01:01.310 --> 00:01:03.960
for that object. We'll say const 

33
00:01:04.035 --> 00:01:08.280
person proxy = new proxy. 

34
00:01:08.280 --> 00:01:11.600
Now, a proxy it takes two things. 

35
00:01:11.850 --> 00:01:13.290
First it takes a target, which 

36
00:01:13.300 --> 00:01:15.290
is, what object would you like 

37
00:01:15.300 --> 00:01:17.720
to proxy? We'll give it the 

38
00:01:17.730 --> 00:01:19.220
person. Then the second is 

39
00:01:19.230 --> 00:01:20.430
something called the handler, 

40
00:01:20.440 --> 00:01:22.150
and the handler is where you 

41
00:01:22.225 --> 00:01:23.660
specify all of the operations 

42
00:01:23.950 --> 00:01:26.390
which you wish to rewrite. That 

43
00:01:26.400 --> 00:01:28.410
is an object inside of there. 

44
00:01:28.740 --> 00:01:30.190
I'm going to bring you over to 

45
00:01:30.650 --> 00:01:32.770
the MDN docs for Proxy right 

46
00:01:32.780 --> 00:01:34.760
here. When you want to overwrite 

47
00:01:34.770 --> 00:01:36.270
one of the default operation, 

48
00:01:36.480 --> 00:01:38.030
those things are called traps. 

49
00:01:38.040 --> 00:01:39.460
Essentially what it does is it 

50
00:01:39.470 --> 00:01:42.040
sits between you and the object. 

51
00:01:42.050 --> 00:01:44.400
If I was to say, person 

52
00:01:44.920 --> 00:01:48.970
proxy.name = Wesley, what I'm 

53
00:01:48.980 --> 00:01:50.840
doing there is I'm setting the 

54
00:01:50.850 --> 00:01:53.540
property of name on this person 

55
00:01:53.550 --> 00:01:56.320
proxy here. What I want to do is 

56
00:01:56.330 --> 00:01:59.360
trap that from happening. I sort 

57
00:01:59.370 --> 00:02:01.580
of want to go in the middle and 

58
00:02:01.780 --> 00:02:04.170
implement my own logic for when 

59
00:02:04.180 --> 00:02:06.180
I want to set it. Here is 

60
00:02:06.190 --> 00:02:07.590
all the methods that you can 

61
00:02:07.600 --> 00:02:09.840
actually trap each other. This 

62
00:02:09.850 --> 00:02:11.390
thing is called a handler, and 

63
00:02:11.400 --> 00:02:13.140
each thing inside of the handler 

64
00:02:13.150 --> 00:02:16.330
is called a trap. I can trap a 

65
00:02:16.340 --> 00:02:19.410
get, a set, a delete, and apply 

66
00:02:19.420 --> 00:02:20.700
a contract. There's a whole 

67
00:02:20.710 --> 00:02:21.750
bunch of them that we can go 

68
00:02:21.760 --> 00:02:22.590
through, and you can look 

69
00:02:22.600 --> 00:02:24.700
through here, but let's do the 

70
00:02:24.710 --> 00:02:28.760
very basics of a .get. In here, 

71
00:02:28.770 --> 00:02:30.280
what I'm going to do is define a 

72
00:02:30.290 --> 00:02:32.290
get. This is just a regular 

73
00:02:32.300 --> 00:02:34.390
object with methods on it, so I 

74
00:02:34.400 --> 00:02:36.660
can use our shorthand here. When 

75
00:02:36.670 --> 00:02:38.960
you get it, you get the target, 

76
00:02:39.320 --> 00:02:40.570
and you get the name that the 

77
00:02:40.580 --> 00:02:43.350
person is requesting, and from 

78
00:02:43.360 --> 00:02:44.490
that, we can just do a console.

79
00:02:44.500 --> 00:02:48.640
log. Someone is asking for 

80
00:02:49.280 --> 00:02:52.440
target and name. Let's take a 

81
00:02:52.450 --> 00:02:53.890
look at what that does here, 

82
00:02:55.340 --> 00:02:58.570
person proxy that's R. 

83
00:02:58.640 --> 00:02:59.730
You can think of this just as a 

84
00:02:59.740 --> 00:03:01.860
regular old object, and then I 

85
00:03:01.870 --> 00:03:03.980
call .name on it. We'll see, 

86
00:03:03.990 --> 00:03:06.050
someone is asking for, it gives 

87
00:03:06.060 --> 00:03:08.240
me the entire object as well as 

88
00:03:08.500 --> 00:03:10.490
the name or the key. Sometimes 

89
00:03:10.500 --> 00:03:12.510
people will call it, of it. 

90
00:03:12.540 --> 00:03:13.890
What could we do there? We could 

91
00:03:13.965 --> 00:03:17.090
just return nah, and maybe some 

92
00:03:17.180 --> 00:03:18.450
fun emojis. Let's see what we 

93
00:03:18.450 --> 00:03:23.130
got here. Germany. Now when I 

94
00:03:23.140 --> 00:03:26.040
ask for person proxy.name, we 

95
00:03:26.040 --> 00:03:27.760
 get "nah" back, right? 

96
00:03:27.790 --> 00:03:29.880
We've sort of jumped in the 

97
00:03:29.890 --> 00:03:33.050
middle of that get, and hijacked 

98
00:03:33.060 --> 00:03:34.440
it, and returned our own. 

99
00:03:34.440 --> 00:03:35.700
Obviously, that's not what you 

100
00:03:36.750 --> 00:03:38.260
want to do, but you can modify, 

101
00:03:38.270 --> 00:03:39.390
you can check if things are 

102
00:03:39.400 --> 00:03:41.670
meeting your standards, or you 

103
00:03:41.680 --> 00:03:43.270
can do something like return 

104
00:03:43.810 --> 00:03:46.510
target name. That would just 

105
00:03:46.520 --> 00:03:47.700
bring us what we're actually 

106
00:03:47.710 --> 00:03:49.780
looking for. Console.log out. 

107
00:03:50.510 --> 00:03:51.650
Wesley. But you could do 

108
00:03:51.660 --> 00:03:52.600
something like .toUpperCase, 

109
00:03:53.880 --> 00:03:54.830
assuming that you're always 

110
00:03:54.840 --> 00:03:56.520
going to have a string, and then 

111
00:03:56.530 --> 00:03:59.710
I return it. It always returns 

112
00:03:59.810 --> 00:04:01.600
me upper case. That's really 

113
00:04:01.610 --> 00:04:03.450
helpful for a variety of reasons. 

114
00:04:03.460 --> 00:04:04.310
We're going to look at a whole 

115
00:04:04.320 --> 00:04:05.690
bunch of examples, but let's 

116
00:04:05.700 --> 00:04:07.480
quickly do another example of 

117
00:04:07.680 --> 00:04:09.210
when you might want to use 

118
00:04:09.250 --> 00:04:11.580
another trap, let's say a set. 

119
00:04:11.580 --> 00:04:13.300
Something that might happen 

120
00:04:13.310 --> 00:04:15.420
where you are setting, and 

121
00:04:15.430 --> 00:04:16.370
there's a whole bunch of white 

122
00:04:16.380 --> 00:04:17.640
space in the string that you're 

123
00:04:17.650 --> 00:04:19.360
setting. You have a target 

124
00:04:20.650 --> 00:04:23.550
and a name. Then we could say if...

125
00:04:26.130 --> 00:04:27.320
Oh, and then we also get passed 

126
00:04:27.330 --> 00:04:28.490
the value that the person is 

127
00:04:28.500 --> 00:04:33.210
sending it. If the type of value 

128
00:04:34.120 --> 00:04:36.110
is equal to a string, 

129
00:04:36.310 --> 00:04:39.230
then what we want to do is say 

130
00:04:39.240 --> 00:04:44.110
target name = value.trim. 

131
00:04:45.860 --> 00:04:47.710
Now if I go to this person proxy, 

132
00:04:47.720 --> 00:04:49.680
and I try to set something new, 

133
00:04:51.550 --> 00:04:56.030
like cool = oh yeah, and a whole 

134
00:04:56.040 --> 00:04:57.760
bunch of white space in there, 

135
00:04:59.580 --> 00:05:01.770
it shows us that, but if we take 

136
00:05:01.780 --> 00:05:04.100
a look at our person proxy, 

137
00:05:05.560 --> 00:05:08.950
you'll see that we now have cool 

138
00:05:08.990 --> 00:05:11.670
is oh yeah. It's been trimmed as 

139
00:05:11.680 --> 00:05:12.950
we then brought it in. We can 

140
00:05:12.960 --> 00:05:17.780
also store like toUpperCase, and 

141
00:05:17.790 --> 00:05:20.020
then maybe we can concatenate on 

142
00:05:22.960 --> 00:05:24.470
some scissors because it was 

143
00:05:24.480 --> 00:05:26.360
trimmed. Just do something silly 

144
00:05:26.370 --> 00:05:30.500
like that. Person proxy.Wes = I 

145
00:05:30.560 --> 00:05:35.060
love Wes, lots of space on the 

146
00:05:35.070 --> 00:05:37.070
end there. Now if we take a look 

147
00:05:37.080 --> 00:05:38.890
at person proxy.Wes, it should 

148
00:05:38.900 --> 00:05:42.290
give us trimmed, upper cased, 

149
00:05:42.550 --> 00:05:44.880
and tacked on with an actual 

150
00:05:44.890 --> 00:05:46.770
scissors. Again, with a 

151
00:05:46.780 --> 00:05:49.160
proxy you can jump in-between 

152
00:05:49.750 --> 00:05:51.010
and overwrite the default 

153
00:05:51.020 --> 00:05:52.250
operations. You notice that I'm 

154
00:05:52.260 --> 00:05:53.930
not using any special methods, 

155
00:05:53.940 --> 00:05:56.180
I'm not using any special 

156
00:05:56.190 --> 00:05:58.180
functions here to set those 

157
00:05:58.190 --> 00:05:59.570
things. I'm simply just using 

158
00:05:59.645 --> 00:06:01.180
the object as I normally would. 

159
00:06:01.460 --> 00:06:03.820
Then the custom logic, which is 

160
00:06:03.830 --> 00:06:06.510
our handler, and the traps, will 

161
00:06:06.860 --> 00:06:08.070
take over. If you do not 

162
00:06:08.080 --> 00:06:10.370
specify one of these traps that 

163
00:06:10.380 --> 00:06:11.440
we have here, obviously there's 

164
00:06:11.440 --> 00:06:12.620
a whole bunch of them, the 

165
00:06:12.940 --> 00:06:14.560
default for the object will take 

166
00:06:14.570 --> 00:06:14.950
over.

