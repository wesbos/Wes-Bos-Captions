[00:00] [music]

[00:02] Nous avons appris ce qu'étaient let et const et ce qu'ils font, et comment leur portée est délimitée, et quand elles peuvent être réassignées et quand elles ne le peuvent pas, mais il reste une interrogation qui est, que dois-je utiliser moi-même.

[00:11] C'est un peu un sujet d'actualité dans la communauté en ce moment, car certaines personnes préfèrent toujours utiliser var. Certaines personnes disent que "Var est mort, totalement." Certaines personnes disent aussi, "Utilisez lat." D'autres personnes utilisent uniquement const.

[00:24] Je vais juste développer deux des opinions majeures ici. Elles sont toutes les deux portées par des gens très, très intelligents sur la scène JavaScript, alors je vous laisserai choisir la vôtre.

[00:34] Celle-ci, faite par Mathias Bynens, est ma manière de faire de faire. Il en parle plus comme, "Const n'est pas seulement une question d'immutabilité où on peut changer la valeur des propriétés." Nous en avons discuté, mais si vous scroller jusqu'en bas, ici, c'est la façon dont il l'utilise, et là c'est comment je l'utilise moi.

[00:49] "Utilisez const par défaut," comme ça à chaque fois que vous créez une variable, partez du principe que c'est const. "Utilisez let seulement si la réassignation est nécessaire." Seulement si vous avez besoin de mettre à jour la valeur de votre variable, vous devez utiliser let. Vous pouvez utiliser const afin de garder la même valeur. Enfin, var ne devrait jamais être utilisé avec ES6. C'est un peu le principe que j'adopte.

[01:07] Une autre opinion qui a du succès, est faite par Kyle Simpson, qui écrit un tas de livres JavaScript géniaux, et qui est, "Utilisez var pour les variables qui sont partagées partout," donc partager des portées plus grandes afin de les utiliser à l'intérieur de votre fonction. " Utilisez let for les variables localisées dans des portées plus courtes."

[01:26] "Refactorez let en const seulement après qu'une certaine quantité de code doive être écrite, et vous pouvez être à peu prêt sûr que le cas ici ne devrait pas être un réassignement de variable," car c'est ce qui est un peu embêtant avec const. Si vous réalisez trop tard que, "Oh, j'ai finalement besoin de mettre à jour cette valeur," vous devez retourner en arrière et changer en let au lieu de const.

[01:42] Ces deux opinions sont toutes les deux très valides. Je vous laisse vous faire votre propre avis. A travers les vidéos, je suivrai ce conseil sur ce point.
