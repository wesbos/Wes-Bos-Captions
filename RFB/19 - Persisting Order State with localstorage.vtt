WEBVTT

1
00:00:00.078 --> 00:00:02.661
(Upbeat music)

2
00:00:05.918 --> 00:00:09.235
<v Wes>Now that our menu of fish is being persisted</v>

3
00:00:09.235 --> 00:00:12.418
to Firebase and reinstated every single time that I refresh,

4
00:00:12.418 --> 00:00:15.007
let's turn our attention to order which is not being

5
00:00:15.007 --> 00:00:18.271
persisted and every time I refresh, I totally lose my order.

6
00:00:18.271 --> 00:00:21.156
I'm going to show you another way to persist data

7
00:00:21.156 --> 00:00:23.925
that's not in a database, but sometimes you just need

8
00:00:23.925 --> 00:00:26.944
to keep data in the users browser so that if they come back

9
00:00:26.944 --> 00:00:29.146
to it or they change pages or refresh,

10
00:00:29.146 --> 00:00:30.417
then we can reinstate it.

11
00:00:30.417 --> 00:00:32.594
We're going to be doing it in the local storage

12
00:00:32.594 --> 00:00:35.540
and if you've never heard of local storage four

13
00:00:35.540 --> 00:00:37.515
it's kind of like cookies,

14
00:00:37.515 --> 00:00:40.995
but a little bit easier to work with.

15
00:00:40.995 --> 00:00:44.328
And, it's a key value token meaning that we can grab

16
00:00:44.328 --> 00:00:45.407
a whole bunch of keys

17
00:00:45.407 --> 00:00:48.111
and then you can store values along with them

18
00:00:48.111 --> 00:00:52.073
and then you can come back to that at a later point in time

19
00:00:52.073 --> 00:00:54.995
and pull that data and put it back into your applications.

20
00:00:54.995 --> 00:00:57.324
So, you can see that Firebase actually uses

21
00:00:57.324 --> 00:00:59.781
local storage itself.

22
00:00:59.781 --> 00:01:03.715
There's some fish IDs that are being pulled in here from

23
00:01:03.715 --> 00:01:07.589
previously when I was testing my other local app.

24
00:01:07.589 --> 00:01:10.626
Then there's other things like other applications I,

25
00:01:10.626 --> 00:01:11.526
by chance,

26
00:01:11.526 --> 00:01:14.616
used this local storage 3000 for other applications.

27
00:01:14.616 --> 00:01:17.738
I have got some tokens here that is used for authentication

28
00:01:17.738 --> 00:01:19.278
and not really sure what this is from.

29
00:01:19.278 --> 00:01:21.862
Probably from some other application running a local host.

30
00:01:21.862 --> 00:01:24.248
If you're ever not sure, you can always just clear it out,

31
00:01:24.248 --> 00:01:29.248
delete everything, refresh your browser and then you'll see

32
00:01:29.351 --> 00:01:31.955
all of the different data that is being added

33
00:01:31.955 --> 00:01:34.446
from your application on Pagelook.

34
00:01:34.446 --> 00:01:38.395
So, let's go back to our application here.

35
00:01:38.395 --> 00:01:43.213
We want to persist this order state in 'local storage',

36
00:01:43.213 --> 00:01:45.844
so, we are in the app component, that makes sense,

37
00:01:45.844 --> 00:01:48.609
but we need to talk about a couple other different

38
00:01:48.609 --> 00:01:50.192
life cycle methods.

39
00:01:51.327 --> 00:01:54.056
The other one that we're going to be using is called

40
00:01:54.056 --> 00:01:56.219
'componentDidUpdate'.

41
00:01:56.219 --> 00:01:58.159
This is something that is evoked

42
00:01:58.159 --> 00:01:59.962
immediately after updating occurs.

43
00:01:59.962 --> 00:02:02.241
This method is not called for the initial render.

44
00:02:02.241 --> 00:02:05.789
That's perfect for us because as soon as it's loaded

45
00:02:05.789 --> 00:02:08.562
and as soon as someone modifies their order,

46
00:02:08.562 --> 00:02:13.072
what we want to do is to update our local storage showing us

47
00:02:13.072 --> 00:02:16.356
that this is exactly what they have added to their order.

48
00:02:16.356 --> 00:02:19.087
So, let's go ahead and do that.

49
00:02:19.087 --> 00:02:22.392
We'll go to 'componentDidMount', we'll go underneath here.

50
00:02:22.392 --> 00:02:24.975
We'll say 'componentDidUpdate'.

51
00:02:26.300 --> 00:02:28.083
And sometimes I like to put

52
00:02:28.083 --> 00:02:30.603
that above my 'componentWillUnmount' so you can kind of see

53
00:02:30.603 --> 00:02:33.642
the whole lifecycle of this thing happens first,

54
00:02:33.642 --> 00:02:35.064
this thing happens next.

55
00:02:35.064 --> 00:02:38.897
So, component update, let's just 'console.log'

56
00:02:39.779 --> 00:02:41.112
'IT UPDATED!!!'.

57
00:02:44.795 --> 00:02:47.499
And we'll go and every time I add something to my order,

58
00:02:47.499 --> 00:02:50.862
you'll see that 'IT UPDATED!!' is being called.

59
00:02:50.862 --> 00:02:53.339
Which is good. Okay, good.

60
00:02:53.339 --> 00:02:57.722
Now, let's take a look. Also, there are no arguments.

61
00:02:57.722 --> 00:03:00.034
Sometimes you're going to see something like

62
00:03:00.034 --> 00:03:02.873
'componentDidCAtch' or 'setState'.

63
00:03:02.873 --> 00:03:05.767
You're going to see that it takes arguments and component

64
00:03:05.767 --> 00:03:08.551
will update 'takes no arguments' because if we need

65
00:03:08.551 --> 00:03:10.869
to be able to access props or states,

66
00:03:10.869 --> 00:03:12.411
we simply just need to use

67
00:03:12.411 --> 00:03:14.404
'this.props' or 'this.state'.

68
00:03:14.404 --> 00:03:18.386
So, let's 'console.log', 'this.state.order'.

69
00:03:18.386 --> 00:03:21.526
Every single time that we modify our order.

70
00:03:21.526 --> 00:03:25.707
Good. So we're seeing that our order state is there.

71
00:03:25.707 --> 00:03:29.886
Now, how do we stick that into our actual local storage?

72
00:03:29.886 --> 00:03:31.175
Well, it's pretty simple.

73
00:03:31.175 --> 00:03:33.899
We simply just say 'localStorage'

74
00:03:33.899 --> 00:03:38.899
capital 'S.setitem' and the item that we're going to set is,

75
00:03:40.528 --> 00:03:42.522
well we can't just say order because this

76
00:03:42.522 --> 00:03:44.939
is gonna be for a specific...

77
00:03:45.816 --> 00:03:47.475
(laughing) Oh that's terrible!

78
00:03:47.475 --> 00:03:52.009
Panicky, unsightly wise of me. Let's go to a better one.

79
00:03:52.009 --> 00:03:53.561
Here we go.

80
00:03:53.561 --> 00:03:55.040
Loaded in, add to order.

81
00:03:55.040 --> 00:03:59.242
We want to store the order for that specific store.

82
00:03:59.242 --> 00:04:02.669
So, the question is, where do you get the store name?

83
00:04:02.669 --> 00:04:03.917
That can come from 'props'.

84
00:04:03.917 --> 00:04:04.750
Remember?

85
00:04:04.750 --> 00:04:07.583
'this.props.match.params.storeId'.

86
00:04:10.964 --> 00:04:14.958
We're going to use the key which is the left hand side.

87
00:04:14.958 --> 00:04:17.540
Application. That's gonna be this.

88
00:04:17.540 --> 00:04:19.856
And then the value is going to be

89
00:04:19.856 --> 00:04:21.255
'this.state.order'.

90
00:04:21.255 --> 00:04:23.257
Now, let me show you what happens

91
00:04:23.257 --> 00:04:25.022
when that actually happens.

92
00:04:25.022 --> 00:04:26.566
Get rid of that.

93
00:04:26.566 --> 00:04:27.399
Save.

94
00:04:28.523 --> 00:04:29.410
Load some sample.

95
00:04:29.410 --> 00:04:30.813
We don't need to load some sample fishes (laughs)

96
00:04:30.813 --> 00:04:32.440
because they already are.

97
00:04:32.440 --> 00:04:34.547
Now, when I modify it, look what's happening.

98
00:04:34.547 --> 00:04:39.047
We are getting the key of 'ugliest-nervous-diagnoses',

99
00:04:39.982 --> 00:04:42.612
but the value is 'obect object'.

100
00:04:42.612 --> 00:04:43.493
The reason why...

101
00:04:43.493 --> 00:04:45.711
If you're ever wondering, like how come I always

102
00:04:45.711 --> 00:04:46.675
see this "object object".

103
00:04:46.675 --> 00:04:49.760
That's because if you ever tried to convert an object

104
00:04:49.760 --> 00:04:50.994
to a string...

105
00:04:50.994 --> 00:04:55.553
So like if I have "const wes" is = to "name: wes".

106
00:04:55.553 --> 00:04:57.126
If I ever have an object and I try

107
00:04:57.126 --> 00:04:59.910
to 'alert' it 'wes'. You will see that this is the 'object'

108
00:04:59.910 --> 00:05:02.552
to 'object' as well and that's because anytime you try to

109
00:05:02.552 --> 00:05:07.349
put an object into a place where a string is required,

110
00:05:07.349 --> 00:05:11.191
the browser will just say "oh, I was expecting a string,

111
00:05:11.191 --> 00:05:13.674
but you gave me something else. So, I'm just going to

112
00:05:13.674 --> 00:05:16.480
call the '.toString' method on that.

113
00:05:16.480 --> 00:05:18.932
That's where it (laughs) gives you "object" to "object"

114
00:05:18.932 --> 00:05:20.210
which is not much use to us.

115
00:05:20.210 --> 00:05:25.210
So, what we need to do is convert that 'object' to a string

116
00:05:25.226 --> 00:05:27.534
representation and that's exaclty what

117
00:05:27.534 --> 00:05:29.367
'JSON.stringify does'.

118
00:05:30.223 --> 00:05:33.188
If I pass 'wes' to that, you will see that it gives me

119
00:05:33.188 --> 00:05:36.298
the string version of what that actual object is.

120
00:05:36.298 --> 00:05:39.195
That's what we're going to use to store in our database.

121
00:05:39.195 --> 00:05:42.744
Just take your 'this.that.state.order'

122
00:05:42.744 --> 00:05:45.375
and wrap it in a JSON.

123
00:05:45.375 --> 00:05:47.458
Capital 'JSON.stringify'.

124
00:05:48.379 --> 00:05:51.242
Now, go back to your application tab.

125
00:05:51.242 --> 00:05:53.061
We're gonna be watching this.

126
00:05:53.061 --> 00:05:55.812
And then, every time I update my order,

127
00:05:55.812 --> 00:05:58.394
that local storage is going to work.

128
00:05:58.394 --> 00:06:01.043
If I refresh the page, you'll see that, oh,

129
00:06:01.043 --> 00:06:02.793
for a split second...

130
00:06:05.836 --> 00:06:07.850
it is being updated.

131
00:06:07.850 --> 00:06:09.082
But then I refresh.

132
00:06:09.082 --> 00:06:10.143
Watch real quick!

133
00:06:10.143 --> 00:06:11.418
It's there for a second and

134
00:06:11.418 --> 00:06:13.329
then it updates to a blank object

135
00:06:13.329 --> 00:06:16.527
and that's because when the component mounts, we are

136
00:06:16.527 --> 00:06:19.265
updating state which is, in turn, triggering

137
00:06:19.265 --> 00:06:20.926
'componentDidUpdate'.

138
00:06:20.926 --> 00:06:24.769
So, what we need to do is...but when we mount, we need to

139
00:06:24.769 --> 00:06:27.102
first, just reinstate the...

140
00:06:28.528 --> 00:06:29.679
local storage.

141
00:06:29.679 --> 00:06:32.679
"First reinstate our local storage".

142
00:06:33.777 --> 00:06:35.315
So, we will say...

143
00:06:35.315 --> 00:06:39.815
'const localStorageRef = to localStorage.getItem'

144
00:06:41.450 --> 00:06:44.970
Local storage is super easy, it's '.setItem.getItem"

145
00:06:44.970 --> 00:06:47.322
and I think it's '.removeItem' to delete it.

146
00:06:47.322 --> 00:06:52.322
And we want to get the item from the 'params.store ID'.

147
00:06:52.716 --> 00:06:55.928
Actually, we don't need back text there.

148
00:06:55.928 --> 00:06:59.190
Let's just 'console.log', 'localStorageRef'

149
00:06:59.190 --> 00:07:01.617
just to see what we've got there.

150
00:07:01.617 --> 00:07:05.174
And, it's nul. It shouldn't be nul.

151
00:07:05.174 --> 00:07:09.193
Oh, capital ID. My entire life is deciding whether

152
00:07:09.193 --> 00:07:12.364
ID should be camel cased or not.

153
00:07:12.364 --> 00:07:14.335
So, put a lower case D there

154
00:07:14.335 --> 00:07:18.134
and now let's add some items to our order and then refresh.

155
00:07:18.134 --> 00:07:19.624
We'll see that this is our

156
00:07:19.624 --> 00:07:23.207
local storage ref right here which is fish 1 and

157
00:07:23.207 --> 00:07:24.641
we had seven of them.

158
00:07:24.641 --> 00:07:27.407
So, what we want to do is take that local storage ref,

159
00:07:27.407 --> 00:07:29.044
which is going to be fish 7

160
00:07:29.044 --> 00:07:31.387
and set it to state, but sometimes we're going

161
00:07:31.387 --> 00:07:33.771
to be visiting a brand new store and there might not be

162
00:07:33.771 --> 00:07:34.720
anything in it.

163
00:07:34.720 --> 00:07:36.444
What we're going to do is say "If"

164
00:07:36.444 --> 00:07:40.798
there is a 'localStorageRef', then, we are going to say

165
00:07:40.798 --> 00:07:42.131
'this.set.state'

166
00:07:43.504 --> 00:07:46.313
and we're going to update the order to be...

167
00:07:46.313 --> 00:07:48.796
and you might think like we can just set it to

168
00:07:48.796 --> 00:07:51.637
'localStorageRef', but what is 'localStorageRef'?

169
00:07:51.637 --> 00:07:54.563
It's a string, right, we need to turn it back into an object

170
00:07:54.563 --> 00:07:56.618
because that is what it's expecting.

171
00:07:56.618 --> 00:07:59.753
So, wrap that thing in the opposite of 'JSON.stringify'

172
00:07:59.753 --> 00:08:01.985
and it's 'JSON.parse'.

173
00:08:01.985 --> 00:08:06.386
That will turn it back from a string into an object.

174
00:08:06.386 --> 00:08:08.703
So, if there is a local storage value,

175
00:08:08.703 --> 00:08:10.025
you're going to reinstate it.

176
00:08:10.025 --> 00:08:13.108
Now, if I add some items to my order,

177
00:08:14.786 --> 00:08:16.314
Add some lobster.

178
00:08:16.314 --> 00:08:18.083
And refresh.

179
00:08:18.083 --> 00:08:20.914
Ahhhhhhh nooo! What happened?!

180
00:08:20.914 --> 00:08:25.035
"Cannot read property status of undefined".

181
00:08:25.035 --> 00:08:27.027
I don't actually know what the issue is here,

182
00:08:27.027 --> 00:08:29.761
but I think it would be helpful to watch me debug this.

183
00:08:29.761 --> 00:08:33.576
My first idea is, is this order actually getting parse?

184
00:08:33.576 --> 00:08:37.635
So, I'm going to 'console.log(JSON.parse(localStorageRef'.

185
00:08:37.635 --> 00:08:41.802
And we'll also do 'console.log' of 'Restoring it'.

186
00:08:43.879 --> 00:08:47.269
Then, go back to the app here and we see restoring it and

187
00:08:47.269 --> 00:08:50.298
we also see that our fish is right there so that's good.

188
00:08:50.298 --> 00:08:53.321
There's nothing wrong with this and it's being set to state.

189
00:08:53.321 --> 00:08:55.961
Let's take a quicker look at the actual error.

190
00:08:55.961 --> 00:09:00.016
"Cannot read property status of undefined".

191
00:09:00.016 --> 00:09:01.349
Ah, there we go.

192
00:09:02.575 --> 00:09:04.266
It's "is available 'fish.status'".

193
00:09:04.266 --> 00:09:07.289
So, what's happening actually here is that we're looping

194
00:09:07.289 --> 00:09:10.706
over all of the keys in our render order,

195
00:09:11.733 --> 00:09:16.219
but what's happening is that there actually is no fish.

196
00:09:16.219 --> 00:09:18.426
So, you're trying to get status of something

197
00:09:18.426 --> 00:09:20.286
that doesn't exist which is the fish.

198
00:09:20.286 --> 00:09:22.263
So, that's a bit of an issue

199
00:09:22.263 --> 00:09:24.865
so one thing we probably could do

200
00:09:24.865 --> 00:09:28.101
is say that if there is a fish first and there's

201
00:09:28.101 --> 00:09:30.355
a fish status, but why is there no fish?

202
00:09:30.355 --> 00:09:33.145
Let's talk about that for a quick second.

203
00:09:33.145 --> 00:09:37.303
And what's happening here is that when the component mounts,

204
00:09:37.303 --> 00:09:40.510
we are checking 'localStorage' and if it's there,

205
00:09:40.510 --> 00:09:43.980
we are setting that to 'state' and then we're setting up

206
00:09:43.980 --> 00:09:45.297
our 'syncState'.

207
00:09:45.297 --> 00:09:48.058
And there's a bit of an issue because 'localStorage'

208
00:09:48.058 --> 00:09:50.175
is local and it's gonna be immediate.

209
00:09:50.175 --> 00:09:52.690
It's gonna be immediately set to 'this'.

210
00:09:52.690 --> 00:09:56.469
The problem with this rebase is that there is a split second

211
00:09:56.469 --> 00:09:59.239
where you have to go to 'Rebase' or go to 'Firebase'

212
00:09:59.239 --> 00:10:03.141
and come back with the actual data and then,

213
00:10:03.141 --> 00:10:05.489
what's happening is we're trying to render out

214
00:10:05.489 --> 00:10:08.270
the order before the fishes actually exist. Right?

215
00:10:08.270 --> 00:10:11.271
Because when we load the page, the fishes are empty until

216
00:10:11.271 --> 00:10:13.462
they can come back from 'Firebase' and be put back

217
00:10:13.462 --> 00:10:14.562
into our state.

218
00:10:14.562 --> 00:10:18.274
That's what Rebase is doing, it's syncing it back into it.

219
00:10:18.274 --> 00:10:22.008
So, should we wait on this? Or something like this?

220
00:10:22.008 --> 00:10:24.243
There's a couple of things that we could do here.

221
00:10:24.243 --> 00:10:25.076
We could say, first,

222
00:10:25.076 --> 00:10:28.658
we could just check and say that it's not available.

223
00:10:28.658 --> 00:10:29.791
We'd say...

224
00:10:29.791 --> 00:10:31.541
'fish.&amp;&amp;fish.status'.

225
00:10:32.777 --> 00:10:35.444
We're going to check if there is a fish and if the fish

226
00:10:35.444 --> 00:10:37.345
status is available.

227
00:10:37.345 --> 00:10:38.178
We check.

228
00:10:38.178 --> 00:10:40.679
If there is a fish and the fish status is available.

229
00:10:40.679 --> 00:10:42.255
So, let's take a quick look here.

230
00:10:42.255 --> 00:10:45.177
I've got a bunch of fishes in there, but, you see how it

231
00:10:45.177 --> 00:10:47.356
sort of quickly flashes?

232
00:10:47.356 --> 00:10:49.689
Sorry, that fish is no longer available

233
00:10:49.689 --> 00:10:52.244
and that's because as we load it, the fishes

234
00:10:52.244 --> 00:10:54.331
aren't there and as the fish get put in,

235
00:10:54.331 --> 00:10:56.203
we will re-render that.

236
00:10:56.203 --> 00:10:57.611
So, that's not great.

237
00:10:57.611 --> 00:10:59.727
What we could do here is before we even

238
00:10:59.727 --> 00:11:04.727
render that out, we could just say 'if there's no fish'

239
00:11:04.787 --> 00:11:08.756
we could do this down here, 'then return null'.

240
00:11:08.756 --> 00:11:10.434
And if you return 'null' from anything,

241
00:11:10.434 --> 00:11:11.832
it will just render out.

242
00:11:11.832 --> 00:11:13.195
Absolutely nothing.

243
00:11:13.195 --> 00:11:15.600
So, let's see this.

244
00:11:15.600 --> 00:11:17.964
So you see now it's just an empty order until

245
00:11:17.964 --> 00:11:20.787
the fish get put in and then it's updating for us.

246
00:11:20.787 --> 00:11:22.779
I'm pretty happy with that.

247
00:11:22.779 --> 00:11:27.612
Put a little comment on that 'make sure the fish is loaded

248
00:11:29.608 --> 00:11:31.275
before we continue'.

249
00:11:33.997 --> 00:11:38.025
Good, so that is fixed. Now we are reinstating our storage.

250
00:11:38.025 --> 00:11:40.402
Let's try it real quick with another.

251
00:11:40.402 --> 00:11:43.988
So this is 'ugliest nervous diagnoses' and I'm

252
00:11:43.988 --> 00:11:47.987
going to go back to my store picker and go to a new one.

253
00:11:47.987 --> 00:11:50.826
Load some sample fishes, add some to the order.

254
00:11:50.826 --> 00:11:54.962
And then I'm gonna go back to that initial one.

255
00:11:54.962 --> 00:11:58.208
And it reinstates my old one because in our application,

256
00:11:58.208 --> 00:12:01.078
now we have two stores worth of data being pushed

257
00:12:01.078 --> 00:12:02.521
into our local storage.

