WEBVTT

1
00:00:00.000 --> 00:00:02.583 line:15% 
(upbeat music)

2
00:00:06.800 --> 00:00:08.180
<v Instructor>Now that we've successfully got</v>

3
00:00:08.180 --> 00:00:10.190
our items added to our order.

4
00:00:10.190 --> 00:00:12.051
We need to take that order state

5
00:00:12.051 --> 00:00:13.680
and display it on the page,

6
00:00:13.680 --> 00:00:14.890
along with some other information.

7
00:00:14.890 --> 00:00:16.550
So, let's take a quick look here,

8
00:00:16.550 --> 00:00:20.120
at my answer and when I add items to my order

9
00:00:20.120 --> 00:00:21.780
it's obviously going to show us

10
00:00:21.780 --> 00:00:23.495
how many of each we want.

11
00:00:23.495 --> 00:00:25.196
What fish we are having,

12
00:00:25.196 --> 00:00:27.750
and then it will do a couple things here.

13
00:00:27.750 --> 00:00:30.313
It'll display the price, and then we'll be able to

14
00:00:30.313 --> 00:00:32.468
as we add more it'll multiple that price.

15
00:00:32.468 --> 00:00:35.840
And then whenever you have multiple items.

16
00:00:35.840 --> 00:00:37.138
It's going to total it out,

17
00:00:37.138 --> 00:00:39.350
so it's going to add these values together.

18
00:00:39.350 --> 00:00:43.160
So, let's hop on over to our order dot JS,

19
00:00:43.160 --> 00:00:45.230
'cause that's where everything is going to happen

20
00:00:45.230 --> 00:00:49.382
and we'll go into this div of the class name of order.

21
00:00:49.382 --> 00:00:52.640
Actually that should have a class name of order wrap.

22
00:00:52.640 --> 00:00:55.630
I believe that lines up with some of the CSS

23
00:00:55.630 --> 00:00:56.820
that I have inside of that.

24
00:00:56.820 --> 00:01:00.360
We need ourselves an h2 tag that says order.

25
00:01:00.360 --> 00:01:01.250
Good.

26
00:01:01.250 --> 00:01:03.840
And then inside of that we're going to have

27
00:01:03.840 --> 00:01:05.340
essentially an unordered list

28
00:01:05.340 --> 00:01:07.450
and every single item in our order

29
00:01:07.450 --> 00:01:08.970
is going to be a list item.

30
00:01:08.970 --> 00:01:12.400
But, before we even get to looping over that,

31
00:01:12.400 --> 00:01:15.220
let's work on the displaying of the actual total.

32
00:01:15.220 --> 00:01:18.570
So, here I've got the total displaying,

33
00:01:18.570 --> 00:01:20.320
how would I then do that?

34
00:01:20.320 --> 00:01:23.520
Well, I'm in the order and does the order

35
00:01:23.520 --> 00:01:25.700
have any information, available to me?

36
00:01:25.700 --> 00:01:28.350
I don't know let's take a quick look here.

37
00:01:28.350 --> 00:01:30.060
So, go to catch of the day.

38
00:01:30.060 --> 00:01:31.810
We'll load some sample fishes.

39
00:01:31.810 --> 00:01:33.320
We'll add a couple to our order

40
00:01:33.320 --> 00:01:35.080
we'll open up our app state,

41
00:01:35.080 --> 00:01:37.980
and our order has stuff in it.

42
00:01:37.980 --> 00:01:40.530
But, if I open up my order component.

43
00:01:42.740 --> 00:01:43.920
There's nothing in it right?

44
00:01:43.920 --> 00:01:45.400
So, we have to pass the den.

45
00:01:45.400 --> 00:01:47.210
I'm going to ask you one more time,

46
00:01:47.210 --> 00:01:50.700
how do we get stuff to a component?

47
00:01:50.700 --> 00:01:52.030
Via props right?

48
00:01:52.030 --> 00:01:54.200
So we'll open up our app state,

49
00:01:54.200 --> 00:01:56.155
we'll go down to our order component

50
00:01:56.155 --> 00:01:57.870
and we need a couple things here.

51
00:01:57.870 --> 00:01:59.620
We need to pass down the fishes,

52
00:01:59.620 --> 00:02:04.010
so we'll say fishes is equal to this dot state dot fishes

53
00:02:04.010 --> 00:02:05.950
and we also need the order so we'll say

54
00:02:05.950 --> 00:02:08.850
order equals this dot state dot order.

55
00:02:08.850 --> 00:02:11.340
Now you may be asking okay so

56
00:02:11.340 --> 00:02:13.296
we're passing down the entire state,

57
00:02:13.296 --> 00:02:15.530
couldn't we just pass down the entire state?

58
00:02:15.530 --> 00:02:17.560
And let me show you actually how this works.

59
00:02:17.560 --> 00:02:19.811
So we'll go back to our chrome here.

60
00:02:19.811 --> 00:02:22.229
Load it up, add some stuff to my order.

61
00:02:22.229 --> 00:02:25.460
And now when I look at my order,

62
00:02:25.460 --> 00:02:27.110
you'll see that our order both

63
00:02:27.110 --> 00:02:29.471
has all of the fishes as well as our

64
00:02:29.471 --> 00:02:33.010
our order state being passed in via props.

65
00:02:33.010 --> 00:02:34.270
There's this other thing in react

66
00:02:34.270 --> 00:02:36.570
that you can do is called an object spread.

67
00:02:36.570 --> 00:02:39.320
And you can essentially spread everything

68
00:02:39.320 --> 00:02:40.440
from state into it.

69
00:02:40.440 --> 00:02:43.990
So, dot, dot, dot, this dot state.

70
00:02:43.990 --> 00:02:45.380
And what they will do is it's going

71
00:02:45.380 --> 00:02:47.420
to take everything in state.

72
00:02:47.420 --> 00:02:50.750
It works the exact same way where we copied an object

73
00:02:50.750 --> 00:02:53.560
but this is going to spread everything

74
00:02:53.560 --> 00:02:55.660
from state into order.

75
00:02:55.660 --> 00:02:57.330
And now if we go back.

76
00:02:58.670 --> 00:03:00.100
And I load some sample fishes

77
00:03:00.100 --> 00:03:01.650
and add some stuff to my order.

78
00:03:02.800 --> 00:03:05.040
It's exactly the same, fishes and order.

79
00:03:05.040 --> 00:03:07.120
Now, that's a little bit lazy

80
00:03:07.120 --> 00:03:09.190
and I could run into some trouble,

81
00:03:09.190 --> 00:03:11.250
by automatically passing everything down.

82
00:03:11.250 --> 00:03:12.190
When I first saw that, I was like

83
00:03:12.190 --> 00:03:13.110
great that's what I want,

84
00:03:13.110 --> 00:03:15.550
I hate having to explicitly pass everything down.

85
00:03:15.550 --> 00:03:18.510
But, we want to make these

86
00:03:18.510 --> 00:03:20.740
really modular components where we

87
00:03:20.740 --> 00:03:23.280
know what sort of data is being passed in

88
00:03:23.280 --> 00:03:25.150
and we don't just assume that

89
00:03:25.150 --> 00:03:26.610
all of the data's get passed in.

90
00:03:26.610 --> 00:03:29.570
And the problem with the spread, with the this dot state

91
00:03:29.570 --> 00:03:32.507
is if I were to add another item to my state,

92
00:03:32.507 --> 00:03:35.980
maybe like age, a hundred

93
00:03:35.980 --> 00:03:39.930
and cool is true.

94
00:03:39.930 --> 00:03:43.850
Watch what happens now when I open up my order state,

95
00:03:43.850 --> 00:03:46.490
it automatically passes down all of that data

96
00:03:46.490 --> 00:03:47.950
whether I like it or not.

97
00:03:47.950 --> 00:03:49.820
And you should not be passing down data,

98
00:03:49.820 --> 00:03:51.990
unless you explicitly need it.

99
00:03:51.990 --> 00:03:55.630
So, that spread can be helpful,

100
00:03:55.630 --> 00:03:57.810
if you have an object full

101
00:03:57.810 --> 00:03:59.840
of multiple things that you wanna pass down.

102
00:03:59.840 --> 00:04:03.430
But, don't use it to pass down your entire state.

103
00:04:03.430 --> 00:04:07.130
So we'll bring that back to just explicitly

104
00:04:07.130 --> 00:04:09.728
passing these things down that we need.

105
00:04:09.728 --> 00:04:12.840
Good, so we'll head over to our order now.

106
00:04:12.840 --> 00:04:15.880
And what I wanna do is, before we return some JSX,

107
00:04:15.880 --> 00:04:19.730
we need to tally up the total of our actual order, right?

108
00:04:19.730 --> 00:04:22.060
So what we'll do here is first things we need

109
00:04:22.060 --> 00:04:24.090
just an array of all the order ids.

110
00:04:24.090 --> 00:04:27.810
We'll say const the order ideas equals,

111
00:04:27.810 --> 00:04:30.150
and we'll use our object dot keys, again.

112
00:04:30.150 --> 00:04:32.770
And we'll say this dot props dot order.

113
00:04:32.770 --> 00:04:35.530
And that's just try to display that below it,

114
00:04:35.530 --> 00:04:37.340
so we'll say order ids.

115
00:04:39.370 --> 00:04:40.390
Pull up some sample fishes,

116
00:04:40.390 --> 00:04:43.060
and then as I add the items to my order.

117
00:04:43.060 --> 00:04:45.130
You'll that we're able to see that,

118
00:04:45.130 --> 00:04:47.050
there's fish one and fish two in my order

119
00:04:47.050 --> 00:04:49.260
I can add a fish four,

120
00:04:49.260 --> 00:04:50.610
add a fish five, et cetera.

121
00:04:50.610 --> 00:04:53.240
You see that the order ids are being added to the order.

122
00:04:53.240 --> 00:04:54.450
So, that's good.

123
00:04:54.450 --> 00:04:59.040
Next, we need to make a total of how much each of them cost.

124
00:04:59.040 --> 00:05:01.210
So we'll say const total equals,

125
00:05:01.210 --> 00:05:03.580
and we're gonna take the order ids

126
00:05:03.580 --> 00:05:05.930
and we're gonna run a reduce on them

127
00:05:05.930 --> 00:05:07.970
and what a reduce is, is sort of

128
00:05:07.970 --> 00:05:10.640
like a four loop or a map.

129
00:05:10.640 --> 00:05:14.780
But, instead of returning a new item,

130
00:05:14.780 --> 00:05:17.300
from like a map or instead of just looping over

131
00:05:17.300 --> 00:05:20.840
and updating an external variable like a four loop would.

132
00:05:20.840 --> 00:05:23.652
A reduce will take in some data and return

133
00:05:23.652 --> 00:05:27.690
sorta like a tally or it can actually

134
00:05:27.690 --> 00:05:28.930
do a whole bunch of other stuff.

135
00:05:28.930 --> 00:05:32.710
But, in this case we are just going to return a tally.

136
00:05:32.710 --> 00:05:33.860
If you're interested in learning

137
00:05:33.860 --> 00:05:35.800
more about these reduce and map.

138
00:05:35.800 --> 00:05:38.304
I have a course javascript30.com

139
00:05:38.304 --> 00:05:40.525
and I have this two specific days.

140
00:05:40.525 --> 00:05:44.850
Day one, array cardio day one, which is day four.

141
00:05:44.850 --> 00:05:47.430
And array cardio two which is on day seven.

142
00:05:47.430 --> 00:05:49.795
These go over map, filter, reduce.

143
00:05:49.795 --> 00:05:51.660
All of those array methods,

144
00:05:51.660 --> 00:05:54.280
that are going to make you a better JavaScript developer.

145
00:05:54.280 --> 00:05:56.100
So, if you're having trouble with reduce,

146
00:05:56.100 --> 00:05:58.010
maybe take a quick break and go over those.

147
00:05:58.010 --> 00:06:00.630
So, we have reduce here and that's going to

148
00:06:00.630 --> 00:06:04.191
take in the prev total which is maybe the tally,

149
00:06:04.191 --> 00:06:05.959
and it's going to take in the key,

150
00:06:05.959 --> 00:06:08.422
which is fish one, fish two, fish three.

151
00:06:08.422 --> 00:06:10.880
We'll use an arrow and curly brackets.

152
00:06:10.880 --> 00:06:14.290
Now, inside of here we need to make a couple variables.

153
00:06:14.290 --> 00:06:16.540
So, say const fish, we need to grab

154
00:06:16.540 --> 00:06:18.543
the actual fish that we're looping over.

155
00:06:18.543 --> 00:06:22.250
This dot props dot fishes,

156
00:06:22.250 --> 00:06:25.300
and we use the key to grab it.

157
00:06:25.300 --> 00:06:28.900
We need how many of the fish they are buying,

158
00:06:28.900 --> 00:06:32.040
'cause if you are buying three of fish one,

159
00:06:32.040 --> 00:06:33.020
then we need that value.

160
00:06:33.020 --> 00:06:37.820
So we'll say const count is dot props dot order,

161
00:06:37.820 --> 00:06:41.760
key and then we also need a bullion to tell us

162
00:06:41.760 --> 00:06:43.080
if that fish is available,

163
00:06:43.080 --> 00:06:45.581
because there is an option where

164
00:06:45.581 --> 00:06:48.302
you can add something to your order like lobster.

165
00:06:48.302 --> 00:06:52.190
And then, if it's sold out it should

166
00:06:52.190 --> 00:06:53.460
tell us that it's sold out.

167
00:06:53.460 --> 00:06:54.930
'Cause then we're in a bit of trouble

168
00:06:54.930 --> 00:06:57.000
where someone has something in their order

169
00:06:57.000 --> 00:06:59.140
but then it's been changed to sold out.

170
00:06:59.140 --> 00:07:01.204
So they shouldn't be charged for it,

171
00:07:01.204 --> 00:07:02.480
they should just be told

172
00:07:02.480 --> 00:07:04.191
sorry lobsters no longer available

173
00:07:04.191 --> 00:07:08.360
and then the total should be reflected based on that.

174
00:07:08.360 --> 00:07:11.379
So we will go const is available is equal to

175
00:07:11.379 --> 00:07:13.020
first you want to check if there

176
00:07:13.020 --> 00:07:15.870
is a fish, so it's not deleted.

177
00:07:15.870 --> 00:07:20.870
And, the fish dot status is equal to available.

178
00:07:22.600 --> 00:07:24.570
Good, now what we need to do is simply say

179
00:07:24.570 --> 00:07:27.950
if the fish is available,

180
00:07:27.950 --> 00:07:31.370
then we are going to return the previous total

181
00:07:31.370 --> 00:07:33.460
which is the sorta the running tally

182
00:07:33.460 --> 00:07:35.540
of how much the order cost so far

183
00:07:35.540 --> 00:07:37.840
as we're looping through each fish.

184
00:07:37.840 --> 00:07:40.185
Plus, then we want to take the count,

185
00:07:40.185 --> 00:07:43.260
how many of each one, multiply it

186
00:07:43.260 --> 00:07:46.800
by the fish dot price.

187
00:07:46.800 --> 00:07:50.330
And then, if not we just want to return the previous total.

188
00:07:50.330 --> 00:07:52.540
Because in this case the fish wasn't available

189
00:07:52.540 --> 00:07:54.550
so we're going to skip over that one

190
00:07:54.550 --> 00:07:57.600
and keep adding up the additional ones.

191
00:07:57.600 --> 00:08:00.250
And then finally, a reduce when your adding numbers

192
00:08:01.104 --> 00:08:03.129
you need to always start with the starting value,

193
00:08:03.129 --> 00:08:05.030
in our case we're going to start with zero.

194
00:08:05.030 --> 00:08:07.150
So, if that worked, let's just

195
00:08:07.150 --> 00:08:08.290
double check that, that works.

196
00:08:08.290 --> 00:08:10.921
We'll go down here and do ourselves

197
00:08:10.921 --> 00:08:15.230
a class of total and inside of that

198
00:08:15.230 --> 00:08:16.930
I'm gonna give myself a strong tag,

199
00:08:16.930 --> 00:08:20.280
and we'll pop the total variable inside of that.

200
00:08:21.140 --> 00:08:24.060
So go back here, we'll load up some sample fishes,

201
00:08:24.060 --> 00:08:26.880
you can see it is zero, 'cause there's nothing added yet.

202
00:08:26.880 --> 00:08:30.250
But now, as I add item to, there we go, beauty.

203
00:08:30.250 --> 00:08:33.530
As I add more items to my order, the value is going up.

204
00:08:33.530 --> 00:08:36.020
This is obviously, cents, so how do we fix that?

205
00:08:36.020 --> 00:08:39.290
Let's go back to our order and we'll import

206
00:08:39.290 --> 00:08:42.595
the helper of format money, our helpers file

207
00:08:42.595 --> 00:08:44.990
and then we'll go down to our total

208
00:08:44.990 --> 00:08:47.340
and here we can just say total

209
00:08:47.340 --> 00:08:50.700
and then wrap the total in a format money,

210
00:08:51.940 --> 00:08:53.530
function.

211
00:08:53.530 --> 00:08:56.160
Oh it does not contain something

212
00:08:56.160 --> 00:08:58.830
called format money from the helpers.

213
00:08:58.830 --> 00:08:59.770
Why not?

214
00:08:59.770 --> 00:09:00.880
What is it called?

215
00:09:01.830 --> 00:09:05.250
Format price not format money.

216
00:09:05.250 --> 00:09:06.083
Boom.

217
00:09:06.970 --> 00:09:07.940
Good, total zero.

218
00:09:07.940 --> 00:09:11.000
Load some sample fishes, add some items to the order.

219
00:09:11.000 --> 00:09:12.420
You can see that the order total

220
00:09:12.420 --> 00:09:14.970
is going up and up and up as we need it.

221
00:09:14.970 --> 00:09:16.040
Good.

222
00:09:16.040 --> 00:09:17.630
Now, let's actually go ahead

223
00:09:17.630 --> 00:09:20.406
and loop over each of the order ids.

224
00:09:20.406 --> 00:09:24.740
So that we can display that fish and how many that we have.

225
00:09:24.740 --> 00:09:26.878
Now, let's loop over the order ids

226
00:09:26.878 --> 00:09:29.700
and the way that we do that is we're going to give ourselves

227
00:09:29.700 --> 00:09:32.240
an unordered list and then inside of that

228
00:09:32.240 --> 00:09:35.340
we'll take our order ids and we'll map over that.

229
00:09:35.340 --> 00:09:38.170
And let's just say key and for each key

230
00:09:38.170 --> 00:09:41.402
what we're going to do is we're going to

231
00:09:41.402 --> 00:09:44.390
return, and just lets say a list item

232
00:09:45.660 --> 00:09:47.620
and inside of that put the key.

233
00:09:47.620 --> 00:09:49.820
So let's just double check that, that works.

234
00:09:50.920 --> 00:09:53.550
Some sample fishes, yeah there we go.

235
00:09:53.550 --> 00:09:57.600
So now if I inspect that, we're getting a list item

236
00:09:57.600 --> 00:10:01.070
for ever single one that we have.

237
00:10:01.070 --> 00:10:01.903
Good.

238
00:10:01.903 --> 00:10:03.030
Now, I'm gonna show you something

239
00:10:03.030 --> 00:10:05.510
that I like to call a render function

240
00:10:05.510 --> 00:10:08.380
and this is something that I like to use

241
00:10:08.380 --> 00:10:11.430
when my, my render function here

242
00:10:11.430 --> 00:10:13.350
starts to get a little bit overloaded.

243
00:10:13.350 --> 00:10:16.480
Meaning that, that's a lot of code going on in here,

244
00:10:16.480 --> 00:10:18.510
and as soon as you find yourself

245
00:10:18.510 --> 00:10:21.650
having a bit too much code inside of your render function.

246
00:10:21.650 --> 00:10:24.140
That probably means that you're doing

247
00:10:24.140 --> 00:10:26.037
too much in a specific component.

248
00:10:26.037 --> 00:10:29.300
And you could probably shell off some of that

249
00:10:31.010 --> 00:10:34.210
complexity to a separate component.

250
00:10:34.210 --> 00:10:36.810
But, then you're sometimes in the middle where

251
00:10:36.810 --> 00:10:39.550
you're like this is really complex for one render function,

252
00:10:39.550 --> 00:10:42.470
but it doesn't make a whole lot of sense to

253
00:10:42.470 --> 00:10:45.250
to make a separate component just for this one item

254
00:10:45.250 --> 00:10:46.400
'cause I'm really not gonna be

255
00:10:46.400 --> 00:10:49.310
using it anywhere else, inside of it.

256
00:10:49.310 --> 00:10:51.880
So, what I like to do is I like to make separate

257
00:10:51.880 --> 00:10:54.630
render functions inside of a single component.

258
00:10:54.630 --> 00:10:57.270
So, what I'll do here is I'll make a new function

259
00:10:57.270 --> 00:11:00.190
called render order and I'm just making this up

260
00:11:00.190 --> 00:11:02.270
and that's going to take in a key

261
00:11:02.270 --> 00:11:04.800
and we'll have an arrow function coming from that.

262
00:11:04.800 --> 00:11:07.290
And then, from the render order what we can do

263
00:11:07.290 --> 00:11:11.530
is we can return that list item with the key.

264
00:11:14.260 --> 00:11:15.770
And then what you can do when

265
00:11:15.770 --> 00:11:17.730
you're looping over it in your map.

266
00:11:17.730 --> 00:11:19.700
Instead of doing all the complexity

267
00:11:19.700 --> 00:11:22.460
of doing the loop right inside of this.

268
00:11:22.460 --> 00:11:23.930
We can simply shell off

269
00:11:23.930 --> 00:11:26.980
that map function of to another function.

270
00:11:26.980 --> 00:11:31.980
So we'll say map this dot render order.

271
00:11:32.034 --> 00:11:34.290
And then that's all we have to do for this.

272
00:11:34.290 --> 00:11:36.000
Nice and clean and then we know

273
00:11:36.000 --> 00:11:37.370
that when we're rendering out

274
00:11:37.370 --> 00:11:39.680
each of the list items for the order.

275
00:11:39.680 --> 00:11:42.120
We can go to the separate render order function

276
00:11:42.120 --> 00:11:43.070
and deal with it there.

277
00:11:43.070 --> 00:11:44.480
So let's just double check that

278
00:11:44.480 --> 00:11:45.900
these list items are still in there.

279
00:11:45.900 --> 00:11:47.224
Maybe I'll put a fish in there,

280
00:11:47.224 --> 00:11:50.080
just to show that it changed.

281
00:11:50.080 --> 00:11:52.900
Load some sample fishes and then as I add the items

282
00:11:52.900 --> 00:11:56.990
to the order they are showing up in a separate function.

283
00:11:56.990 --> 00:11:58.100
Good.

284
00:11:59.860 --> 00:12:01.270
Now what we need to do is before

285
00:12:01.270 --> 00:12:03.770
we return we need a couple variables again.

286
00:12:03.770 --> 00:12:06.530
So, we need these fish and count variables,

287
00:12:06.530 --> 00:12:08.720
I'm just going to copy these.

288
00:12:08.720 --> 00:12:10.662
Put them up here.

289
00:12:10.662 --> 00:12:12.350
Const fish, count

290
00:12:13.680 --> 00:12:16.100
and we'll go inside of this

291
00:12:16.100 --> 00:12:19.640
and we're going to return the list item

292
00:12:19.640 --> 00:12:22.980
with count lbs

293
00:12:24.410 --> 00:12:26.090
and then fish dot name.

294
00:12:27.370 --> 00:12:29.510
And then we'll go down here

295
00:12:29.510 --> 00:12:33.290
and let's say count times fish dot price.

296
00:12:35.940 --> 00:12:38.280
And then we'll grab our format price

297
00:12:40.220 --> 00:12:43.230
and wrap that there.

298
00:12:43.230 --> 00:12:44.860
Beautiful.

299
00:12:44.860 --> 00:12:47.200
So we'll load some samples, add to order, good.

300
00:12:47.200 --> 00:12:49.170
We got one pound of Pacific halibut.

301
00:12:49.170 --> 00:12:51.390
We're gonna into styling it,

302
00:12:51.390 --> 00:12:53.500
so we have it look a little bit like this.

303
00:12:53.500 --> 00:12:55.330
Add each of them to order, we're gonna get some

304
00:12:55.330 --> 00:12:57.920
fancy items showing up here.

305
00:12:57.920 --> 00:12:59.550
But for now, there are not animating

306
00:12:59.550 --> 00:13:01.730
because we haven't hit that just yet.

307
00:13:01.730 --> 00:13:03.300
Now there is one problem here

308
00:13:03.300 --> 00:13:06.600
where if I were to go to my app state

309
00:13:07.770 --> 00:13:10.090
and find our fishes and find fish one

310
00:13:10.090 --> 00:13:14.120
and change it to unavailable.

311
00:13:14.120 --> 00:13:15.440
You see that, that just changed

312
00:13:15.440 --> 00:13:16.940
the price there from $32.

313
00:13:16.940 --> 00:13:20.770
I'll do it once more, remove change this back to available.

314
00:13:20.770 --> 00:13:25.770
It's $49.24 make it unavailable and it's 32 dollars.

315
00:13:26.100 --> 00:13:30.000
That's because here, when we're calculating the total

316
00:13:30.000 --> 00:13:31.830
we're figuring out if it's available.

317
00:13:31.830 --> 00:13:33.230
But, there's a bit of a problem here

318
00:13:33.230 --> 00:13:36.140
where we're just showing the fish regardless.

319
00:13:36.140 --> 00:13:38.460
So before we actually return this list item,

320
00:13:38.460 --> 00:13:41.090
we need to check if that person is there.

321
00:13:41.090 --> 00:13:45.060
So we'll say if fish dot available,

322
00:13:46.060 --> 00:13:49.610
or fish dot status, is equal to

323
00:13:49.610 --> 00:13:51.950
available then,

324
00:13:52.920 --> 00:13:53.780
and what I like to do in this case

325
00:13:53.780 --> 00:13:56.480
is just make a new variable called is available again.

326
00:13:57.830 --> 00:14:02.350
So const is available

327
00:14:04.060 --> 00:14:06.310
is equal to fish dot status.

328
00:14:06.310 --> 00:14:11.080
So if it is not available so bang available

329
00:14:11.080 --> 00:14:13.880
then we're going to return a list item

330
00:14:13.880 --> 00:14:16.870
and we'll just say sorry fish dot name,

331
00:14:18.330 --> 00:14:20.100
first we wanna say if there's a fish,

332
00:14:20.100 --> 00:14:22.580
then we'll say fish dot name.

333
00:14:23.490 --> 00:14:24.750
Otherwise we're just going to say

334
00:14:24.750 --> 00:14:28.780
the fish is no longer available.

335
00:14:29.750 --> 00:14:31.570
So the reason why I'm doing that

336
00:14:31.570 --> 00:14:33.770
is because there's the possibility

337
00:14:33.770 --> 00:14:35.640
that and we don't have this just yet.

338
00:14:35.640 --> 00:14:38.540
But as I load all these fishes into inventory

339
00:14:38.540 --> 00:14:40.270
and someone adds it to cart.

340
00:14:40.270 --> 00:14:41.760
What's going to happen is that

341
00:14:41.760 --> 00:14:44.680
I can just possibly delete this fish altogether.

342
00:14:44.680 --> 00:14:48.480
Pacific halibut and then there's no way for us to know

343
00:14:48.480 --> 00:14:50.550
what that fish was in their cart,

344
00:14:50.550 --> 00:14:52.470
because we only have a fish key.

345
00:14:52.470 --> 00:14:53.730
So what we do is her is we say

346
00:14:53.730 --> 00:14:55.430
if they have a fish, we'll say

347
00:14:55.430 --> 00:14:58.580
sorry halibut is no longer available,

348
00:14:58.580 --> 00:15:00.440
but if the whole thing is deleted

349
00:15:00.440 --> 00:15:02.540
then we'll just say fish is no longer available.

350
00:15:02.540 --> 00:15:04.670
Nice little fall back that we have there.

351
00:15:04.670 --> 00:15:06.410
Now if we give that a save.

352
00:15:06.410 --> 00:15:07.400
Load some samples.

353
00:15:07.400 --> 00:15:08.800
Add some to our order.

354
00:15:10.020 --> 00:15:14.720
Now, we can change Pacific halibut to unavailable.

355
00:15:18.000 --> 00:15:20.270
And ugh it doesn't work.

356
00:15:20.270 --> 00:15:24.730
If fish dot status is available that didn't fix it.

357
00:15:24.730 --> 00:15:27.100
Any errors in our console here,

358
00:15:27.100 --> 00:15:28.650
we'll get over that in just a second.

359
00:15:28.650 --> 00:15:30.170
So I actually don't know what happened here.

360
00:15:30.170 --> 00:15:33.190
Let's just double check our logic here.

361
00:15:33.190 --> 00:15:37.500
I am dumb and I forgot to type a return in front of this.

362
00:15:37.500 --> 00:15:39.710
So you have to always return your JSX

363
00:15:39.710 --> 00:15:43.280
and then that will stop the function from running.

364
00:15:43.280 --> 00:15:44.860
So if it's not available it returns

365
00:15:44.860 --> 00:15:47.990
sorry otherwise we're just going to return this right here.

366
00:15:47.990 --> 00:15:49.370
Good, let's double check that.

367
00:15:49.370 --> 00:15:51.520
Load some samples add some to our order.

368
00:15:53.130 --> 00:15:55.980
Find our app, open up our fishes,

369
00:15:55.980 --> 00:15:57.400
this is going to get really easy once

370
00:15:57.400 --> 00:15:59.230
we start having some UI to do this.

371
00:15:59.230 --> 00:16:03.020
Unavailable, sorry Pacific halibut is no longer available.

372
00:16:03.020 --> 00:16:04.150
Beautiful.

373
00:16:04.150 --> 00:16:06.370
Awesome, one last thing we wanna do is

374
00:16:06.370 --> 00:16:07.830
let's go down to unordered list,

375
00:16:07.830 --> 00:16:12.640
let's give it a class name of order.

376
00:16:15.290 --> 00:16:18.290
And that should give us a little bit, a nicer styling.

377
00:16:18.290 --> 00:16:19.560
And then we get this error here.

378
00:16:19.560 --> 00:16:22.400
Each child in an array or iterator

379
00:16:22.400 --> 00:16:23.680
should have a unique key prop.

380
00:16:23.680 --> 00:16:25.550
And again, the reason why we need to do that

381
00:16:25.550 --> 00:16:27.930
is 'cause all of the list items inside of our order

382
00:16:27.930 --> 00:16:29.840
they need to have a unique key prop,

383
00:16:29.840 --> 00:16:32.600
so react can quickly find them, if it needs to update them.

384
00:16:32.600 --> 00:16:35.220
So we have to go back up to our render order here

385
00:16:35.220 --> 00:16:38.920
and we'll give a key to that and we can use our key

386
00:16:38.920 --> 00:16:40.795
our variable as a unique identifier.

387
00:16:40.795 --> 00:16:43.320
And then we also need to do it on

388
00:16:43.320 --> 00:16:44.601
the sorry is not available.

389
00:16:44.601 --> 00:16:48.160
Key is equal to key.

390
00:16:49.200 --> 00:16:51.860
That should stop it from whining at us.

391
00:16:52.870 --> 00:16:55.270
Console nothing wrong with that.

392
00:16:55.270 --> 00:16:57.390
Beautiful, let's move on to our next one,

393
00:16:57.390 --> 00:16:59.140
which is persisting state so we don't

394
00:16:59.140 --> 00:17:02.910
have to do this every single time we reload the page.

395
00:17:02.910 --> 00:17:04.990
We've lost all of our fish and our orders,

396
00:17:04.990 --> 00:17:06.650
how do you persist that to a database

397
00:17:06.650 --> 00:17:08.410
so that we can refresh the page

398
00:17:08.410 --> 00:17:10.950
and not have to reinstate all of those.

