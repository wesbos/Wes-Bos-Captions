WEBVTT

1
00:00:02.422 --> 00:00:05.005
(bright music)

2
00:00:06.173 --> 00:00:08.250
<v Instructor>Next up we need to work</v>

3
00:00:08.250 --> 00:00:09.910
on this inventory part here

4
00:00:09.910 --> 00:00:12.780
where I'd be able to edit the price of a fish

5
00:00:12.780 --> 00:00:15.690
and it can sync to Firebase and all that good stuff.

6
00:00:15.690 --> 00:00:20.690
So we are going to open up our inventory.js

7
00:00:20.880 --> 00:00:23.990
and we are going to create a new Component,

8
00:00:23.990 --> 00:00:25.460
not called AddFishForm,

9
00:00:25.460 --> 00:00:27.330
but EditFishForm.

10
00:00:28.338 --> 00:00:30.140
So we'll go into our Components folder,

11
00:00:30.140 --> 00:00:34.890
we'll make a new file called EditFishForm.js.

12
00:00:34.890 --> 00:00:37.530
And then we'll do our whole song and dance

13
00:00:37.530 --> 00:00:41.832
of import React from React

14
00:00:41.832 --> 00:00:44.190
and then I'm gonna go hyper speed.

15
00:00:46.650 --> 00:00:48.190
Okay, so I've imported a React,

16
00:00:48.190 --> 00:00:50.040
I've made a new class with a render method

17
00:00:50.040 --> 00:00:52.070
and it just says edit fish in a paragraph tag

18
00:00:52.070 --> 00:00:55.120
and I exported the default EditFishForm.

19
00:00:55.120 --> 00:00:57.180
Then we'll go into our inventory

20
00:00:57.180 --> 00:01:00.641
and we wanna loop over all of our different fish.

21
00:01:00.641 --> 00:01:01.810
First question,

22
00:01:01.810 --> 00:01:04.450
do we even have our fish in the inventory Component?

23
00:01:04.450 --> 00:01:05.300
Let's double check that.

24
00:01:05.300 --> 00:01:06.840
So I'll go to our app,

25
00:01:06.840 --> 00:01:09.630
let's open up our React dev tools

26
00:01:09.630 --> 00:01:11.510
and we'll search for inventory.

27
00:01:12.470 --> 00:01:13.520
And nope,

28
00:01:13.520 --> 00:01:16.310
there's only add fish and load sample fish functions.

29
00:01:16.310 --> 00:01:20.020
So we'll go back into our app Component here

30
00:01:20.020 --> 00:01:22.380
and we'll find where we did this

31
00:01:22.380 --> 00:01:27.380
and we'll just say fish is equal to this.state.fishes.

32
00:01:27.970 --> 00:01:28.803
Good.

33
00:01:28.803 --> 00:01:30.390
Then we'll go back into our inventory Component,

34
00:01:30.390 --> 00:01:33.490
we will import our EditFishForm

35
00:01:34.698 --> 00:01:37.680
and then we'll go right above our AddFishForm

36
00:01:37.680 --> 00:01:41.200
and say this.props.fishes.map.

37
00:01:41.200 --> 00:01:43.720
And for each fish we are going to

38
00:01:43.720 --> 00:01:48.680
render out a EditFishForm tag.

39
00:01:48.680 --> 00:01:49.939
So what does that give us?

40
00:01:49.939 --> 00:01:52.520
A big old error.

41
00:01:52.520 --> 00:01:53.682
So what happened here?

42
00:01:53.682 --> 00:01:57.098
Cannot read property map of undefined.

43
00:01:57.098 --> 00:02:00.210
Oh, that's because this.props.fishes

44
00:02:00.210 --> 00:02:01.540
is gonna be an object.

45
00:02:01.540 --> 00:02:05.220
So we'll say object.keys,

46
00:02:05.220 --> 00:02:07.019
this.props.fishes.maps.

47
00:02:07.019 --> 00:02:10.330
So we'll turn that into an array before we map over it.

48
00:02:10.330 --> 00:02:12.270
And what else have we got here?

49
00:02:12.270 --> 00:02:14.900
Cannot convert null or undefined to an object.

50
00:02:14.900 --> 00:02:17.060
So I'll show you how I debug this as well.

51
00:02:17.060 --> 00:02:19.850
Take that line off that's causing us an issue

52
00:02:19.850 --> 00:02:21.750
and we'll look at our inventory.

53
00:02:21.750 --> 00:02:25.190
And I passed it as fish, not fishes.

54
00:02:25.190 --> 00:02:26.741
So I'll go back to our app,

55
00:02:26.741 --> 00:02:28.020
fishes.

56
00:02:29.870 --> 00:02:31.024
Good.

57
00:02:31.024 --> 00:02:32.210
Probably screaming at me for minutes.

58
00:02:32.210 --> 00:02:33.043
There we go.

59
00:02:33.043 --> 00:02:34.440
So for every fish that we have,

60
00:02:34.440 --> 00:02:36.750
we have this edit fish Component showing up.

61
00:02:36.750 --> 00:02:38.210
So EditFishForm.

62
00:02:38.210 --> 00:02:39.400
See we got (buzzing lips)

63
00:02:39.400 --> 00:02:41.435
all these Component being rendered out.

64
00:02:41.435 --> 00:02:44.700
Then instead of our edit fish we are going to

65
00:02:44.700 --> 00:02:48.800
return a div with the class of fish edit.

66
00:02:48.800 --> 00:02:51.180
So this doesn't need to be a form tag,

67
00:02:51.180 --> 00:02:53.130
this can just be a regular old div.

68
00:02:53.130 --> 00:02:54.690
And then inside of that I'm gonna do

69
00:02:54.690 --> 00:02:56.480
a little bit more kung fu,

70
00:02:56.480 --> 00:02:57.640
where we've got our name,

71
00:02:57.640 --> 00:02:59.330
price, status, description.

72
00:02:59.330 --> 00:03:01.790
And I'm going to make all of those

73
00:03:01.790 --> 00:03:06.790
into an input with the type of text,

74
00:03:08.970 --> 00:03:11.840
the name of and whatever that is.

75
00:03:11.840 --> 00:03:13.270
So the name is important here

76
00:03:13.270 --> 00:03:15.220
and I'll show you why in just a second.

77
00:03:20.448 --> 00:03:23.120
So we've got a whole bunch of input boxes.

78
00:03:23.120 --> 00:03:26.780
The status needs to be put into a select,

79
00:03:26.780 --> 00:03:28.640
which I'll add that there.

80
00:03:28.640 --> 00:03:29.850
Select.

81
00:03:29.850 --> 00:03:31.970
And the options we can actually pull

82
00:03:31.970 --> 00:03:34.810
the options right from our select here.

83
00:03:34.810 --> 00:03:35.940
Beautiful.

84
00:03:35.940 --> 00:03:39.300
And our description needs to be a text area.

85
00:03:47.348 --> 00:03:49.460
Good, we've got a text area.

86
00:03:49.460 --> 00:03:51.050
And our drop down, everything.

87
00:03:51.050 --> 00:03:56.050
So now let's hook the values actually up to the fish.

88
00:03:56.200 --> 00:03:59.410
So we don't actually have the individual fish

89
00:03:59.410 --> 00:04:01.780
being passed down to our EditFishForm,

90
00:04:01.780 --> 00:04:04.020
so we'll go back to our inventory.

91
00:04:04.020 --> 00:04:07.110
And we have this fish here

92
00:04:07.110 --> 00:04:08.600
and this is actually not a fish.

93
00:04:08.600 --> 00:04:09.900
Let's change that to key

94
00:04:09.900 --> 00:04:12.370
'cause that is just a key of the actual fish.

95
00:04:12.370 --> 00:04:14.544
And then we'll pass the individual fish down

96
00:04:14.544 --> 00:04:18.040
by saying this.props.fishes,

97
00:04:18.040 --> 00:04:20.183
square bracket, key.

98
00:04:20.183 --> 00:04:23.450
And if that worked,

99
00:04:24.530 --> 00:04:27.043
let me search for our EditFishForm.

100
00:04:27.043 --> 00:04:27.876
There we go.

101
00:04:27.876 --> 00:04:29.130
See every single EditFishForm has

102
00:04:29.130 --> 00:04:33.830
an individual description for each of the individual fishes.

103
00:04:33.830 --> 00:04:36.050
So we can go back and we can set

104
00:04:36.050 --> 00:04:41.050
the value of all these inputs to be the value from props.

105
00:04:41.170 --> 00:04:42.531
So status,

106
00:04:42.531 --> 00:04:43.480
name,

107
00:04:43.480 --> 00:04:44.380
price,

108
00:04:44.380 --> 00:04:45.220
description,

109
00:04:45.220 --> 00:04:46.300
and image.

110
00:04:47.600 --> 00:04:52.600
Say value is equal to this.props.fish.

111
00:04:52.950 --> 00:04:55.040
Whatever the actual name is.

112
00:04:55.040 --> 00:04:56.520
Now this is gonna yell at us

113
00:04:56.520 --> 00:04:58.100
and we're not using default value

114
00:04:58.100 --> 00:04:59.580
and I explain why in just a second.

115
00:04:59.580 --> 00:05:01.560
But let's see how it works.

116
00:05:01.560 --> 00:05:02.393
Beautiful.

117
00:05:02.393 --> 00:05:03.370
Pacific halibut,

118
00:05:03.370 --> 00:05:04.203
fresh.

119
00:05:04.203 --> 00:05:06.750
You see that by default it switches this one to sold out,

120
00:05:06.750 --> 00:05:07.820
which is great.

121
00:05:07.820 --> 00:05:09.530
And there are some errors in the console,

122
00:05:09.530 --> 00:05:10.830
so let's deal with them one by one.

123
00:05:10.830 --> 00:05:11.700
Each child in an array,

124
00:05:11.700 --> 00:05:13.250
oh we always get this one.

125
00:05:13.250 --> 00:05:17.090
So let's go to inventory and we're looping over

126
00:05:17.090 --> 00:05:19.260
and returning a fish for each one.

127
00:05:19.260 --> 00:05:22.410
So we need to say key is equal to key

128
00:05:22.410 --> 00:05:25.390
so that each EditFishForm is unique.

129
00:05:25.390 --> 00:05:26.550
Does that get rid of that one?

130
00:05:26.550 --> 00:05:27.383
Yep.

131
00:05:27.383 --> 00:05:28.490
Now this one.

132
00:05:28.490 --> 00:05:30.490
Warning, failed prop type.

133
00:05:30.490 --> 00:05:33.410
You provided a value prop on a form field

134
00:05:33.410 --> 00:05:35.820
without an onChange handler.

135
00:05:35.820 --> 00:05:37.490
This will render a read-only field.

136
00:05:37.490 --> 00:05:39.124
So try typing one of these.

137
00:05:39.124 --> 00:05:40.480
Nothing.

138
00:05:40.480 --> 00:05:41.530
Nothing happens.

139
00:05:41.530 --> 00:05:44.860
And that's because React doesn't like it

140
00:05:44.860 --> 00:05:48.260
when you put state into an editable area

141
00:05:48.260 --> 00:05:50.970
without you having a plan for updating it.

142
00:05:50.970 --> 00:05:51.803
Why?

143
00:05:51.803 --> 00:05:54.104
Because as soon as you put state into a text box,

144
00:05:54.104 --> 00:05:57.330
now all of a sudden you've got state in two spots.

145
00:05:57.330 --> 00:05:59.110
You've got state in your actual state

146
00:05:59.110 --> 00:06:01.170
and you have state in a text box.

147
00:06:01.170 --> 00:06:05.240
And now it's all spread across two different areas

148
00:06:05.240 --> 00:06:07.440
and that can get out of hand real quickly.

149
00:06:07.440 --> 00:06:11.063
So what React does is rather than you

150
00:06:11.063 --> 00:06:13.470
typing into an input box,

151
00:06:13.470 --> 00:06:17.670
what it does is it will intercept the event that you create.

152
00:06:17.670 --> 00:06:20.780
I'm gonna type the X key into the pacific halibut.

153
00:06:20.780 --> 00:06:21.900
Bam, hit it.

154
00:06:21.900 --> 00:06:23.784
What it will do is immediately backspace it

155
00:06:23.784 --> 00:06:25.560
and be like no, no, no,

156
00:06:25.560 --> 00:06:28.640
you must put it into state if you want that to change.

157
00:06:28.640 --> 00:06:31.300
So what we would have to do is go to our app,

158
00:06:31.300 --> 00:06:32.540
go to our fishes,

159
00:06:32.540 --> 00:06:35.560
go to this first one and change it

160
00:06:35.560 --> 00:06:37.360
and put Xs in it.

161
00:06:37.360 --> 00:06:39.100
And that will of course update it.

162
00:06:39.100 --> 00:06:41.290
But if we want to be able to type into here,

163
00:06:41.290 --> 00:06:44.030
we need to listen for an OnChange event.

164
00:06:44.030 --> 00:06:45.870
So that's exactly what we're gonna be doing.

165
00:06:45.870 --> 00:06:48.302
Back to our EditFishForm.

166
00:06:48.302 --> 00:06:52.270
On each of these values that we have here,

167
00:06:52.270 --> 00:06:57.070
so just gonna go to select all my values.

168
00:06:58.850 --> 00:07:02.170
And I'm gonna say OnChange is equal to

169
00:07:03.060 --> 00:07:04.990
this.handlechange.

170
00:07:07.070 --> 00:07:08.100
Then we're gonna,

171
00:07:08.100 --> 00:07:09.540
oh nice formatting there.

172
00:07:09.540 --> 00:07:11.250
I guess as soon as you hit for it'll

173
00:07:11.250 --> 00:07:12.910
bring it onto its own line.

174
00:07:12.910 --> 00:07:14.230
Then up here we're going to make

175
00:07:14.230 --> 00:07:18.040
a handle change method of our own.

176
00:07:19.040 --> 00:07:21.800
And that method is going to take in the event.

177
00:07:21.800 --> 00:07:24.810
And then we're just gonna console log the event

178
00:07:24.810 --> 00:07:27.620
and that's good enough for now.

179
00:07:27.620 --> 00:07:30.724
So as soon as I put my cursor in here and type an X,

180
00:07:30.724 --> 00:07:34.100
the console is gonna console log this proxy

181
00:07:34.100 --> 00:07:36.380
which is this is the actual event that's happening.

182
00:07:36.380 --> 00:07:37.270
See?

183
00:07:37.270 --> 00:07:40.330
It's running the event every single time.

184
00:07:40.330 --> 00:07:41.900
And on that event there's something

185
00:07:41.900 --> 00:07:44.420
called event.currenttarget.

186
00:07:44.420 --> 00:07:45.900
And the current target is the thing

187
00:07:45.900 --> 00:07:48.010
that the event got fired on.

188
00:07:48.010 --> 00:07:50.810
So that should give us the actual input box.

189
00:07:50.810 --> 00:07:52.060
There we go.

190
00:07:52.060 --> 00:07:54.240
See how this is a bit of a different way

191
00:07:54.240 --> 00:07:56.160
to do it versus refs?

192
00:07:56.160 --> 00:07:58.190
We can just grab the event.target

193
00:07:58.190 --> 00:08:01.630
and then we can grab the event.target.value out of it.

194
00:08:02.950 --> 00:08:05.150
And if I put an X on the end here,

195
00:08:05.150 --> 00:08:07.060
you see how it's console logging

196
00:08:07.060 --> 00:08:09.030
whatever it is that I'm trying to type,

197
00:08:09.030 --> 00:08:10.930
but it's not updating the text box?

198
00:08:10.930 --> 00:08:12.690
'cause React is like nuh uh uh,

199
00:08:12.690 --> 00:08:14.360
it's not in state.

200
00:08:14.360 --> 00:08:18.560
So what we need to do is create an updated fish object

201
00:08:18.560 --> 00:08:23.030
and then somehow swim upstream (chuckles)

202
00:08:23.030 --> 00:08:25.780
from EditFishForm to inventory,

203
00:08:25.780 --> 00:08:27.640
and then from inventory to app.

204
00:08:27.640 --> 00:08:32.120
We need to get that updated fish back into our state.

205
00:08:32.120 --> 00:08:32.953
Okay, okay.

206
00:08:32.953 --> 00:08:35.360
So let's first go here.

207
00:08:35.360 --> 00:08:38.250
Let's say update that fish.

208
00:08:38.250 --> 00:08:40.079
So first thing we're gonna do is one,

209
00:08:40.079 --> 00:08:43.910
take a copy of the current fish.

210
00:08:44.750 --> 00:08:47.230
So say const updated fish

211
00:08:47.230 --> 00:08:50.290
is equal to dot, dot, dot,

212
00:08:50.290 --> 00:08:54.290
this.props.fish.

213
00:08:54.290 --> 00:08:56.350
And let's just console log the updated fish,

214
00:08:56.350 --> 00:08:58.410
see what we're working with here.

215
00:09:00.270 --> 00:09:01.940
So we've got the updated fish,

216
00:09:01.940 --> 00:09:02.930
we've got the description,

217
00:09:02.930 --> 00:09:03.890
pacific halibut,

218
00:09:03.890 --> 00:09:05.730
but I'm putting an X on the end of this.

219
00:09:05.730 --> 00:09:09.010
So what we need to do is we need to update the name, right?

220
00:09:09.010 --> 00:09:11.830
So what you can do is go here

221
00:09:11.830 --> 00:09:13.510
and let's put this object on its own line

222
00:09:13.510 --> 00:09:14.960
so it looks a little nicer.

223
00:09:16.549 --> 00:09:18.600
And ideally what would happen is we would

224
00:09:18.600 --> 00:09:23.600
update the name to be event.currenttarget.value.

225
00:09:24.980 --> 00:09:26.661
So give that a save.

226
00:09:26.661 --> 00:09:29.780
And now if I put an X on the end,

227
00:09:29.780 --> 00:09:34.420
our new updated fish has an X on the end.

228
00:09:34.420 --> 00:09:37.339
But what if wanna change the price?

229
00:09:37.339 --> 00:09:39.290
If I put a two in front of it

230
00:09:39.290 --> 00:09:40.310
you see it doesn't work.

231
00:09:40.310 --> 00:09:41.180
Why?

232
00:09:41.180 --> 00:09:43.680
Well that's because it doesn't know

233
00:09:43.680 --> 00:09:45.980
which property to actually update.

234
00:09:45.980 --> 00:09:48.510
So what we can do is this is a new thing in ES6,

235
00:09:48.510 --> 00:09:50.440
it's called computed property names,

236
00:09:50.440 --> 00:09:52.920
where we essentially want the value

237
00:09:52.920 --> 00:09:55.750
that's being updated to also be dynamic.

238
00:09:55.750 --> 00:09:58.490
And the way that you can do that is with square brackets.

239
00:09:58.490 --> 00:10:01.620
And this is why I told you to put a name on there,

240
00:10:02.460 --> 00:10:04.250
let me take this and comment that out for a sec,

241
00:10:04.250 --> 00:10:08.940
if we console log event.currenttarget.name,

242
00:10:11.049 --> 00:10:14.980
then it will tell us that the name was updated,

243
00:10:14.980 --> 00:10:16.460
the price was updated,

244
00:10:17.610 --> 00:10:18.870
the status was updated,

245
00:10:18.870 --> 00:10:19.930
the description was updated,

246
00:10:19.930 --> 00:10:21.600
and the image was updated.

247
00:10:21.600 --> 00:10:24.640
So we can figure out what got changed

248
00:10:24.640 --> 00:10:27.731
just by using the event.currenttarget.name

249
00:10:27.731 --> 00:10:31.540
and setting it to the event.currenttarget.value.

250
00:10:31.540 --> 00:10:32.373
So that's really nice.

251
00:10:32.373 --> 00:10:34.560
We just take a copy of the current fish

252
00:10:34.560 --> 00:10:36.920
and then overwrite the one thing that changed.

253
00:10:36.920 --> 00:10:37.830
And I really like this,

254
00:10:37.830 --> 00:10:39.730
because sometimes I see people making

255
00:10:39.730 --> 00:10:41.470
like handle name change,

256
00:10:41.470 --> 00:10:42.970
handle description change,

257
00:10:42.970 --> 00:10:43.810
handle status change,

258
00:10:43.810 --> 00:10:45.850
you make a new method for every single field

259
00:10:45.850 --> 00:10:47.240
and that's not really maintainable

260
00:10:47.240 --> 00:10:50.080
because you're doing all kinds of stuff there.

261
00:10:50.080 --> 00:10:52.215
So if this worked,

262
00:10:52.215 --> 00:10:53.685
I should be able to,

263
00:10:53.685 --> 00:10:56.440
oh man, how does JavaScript work?

264
00:10:56.440 --> 00:10:57.605
I forgot a comma.

265
00:10:57.605 --> 00:10:58.770
There we go.

266
00:11:00.010 --> 00:11:02.450
If this works I should be able to change the halibut.

267
00:11:02.450 --> 00:11:03.283
Good.

268
00:11:03.283 --> 00:11:04.230
And it still doesn't show there

269
00:11:04.230 --> 00:11:05.390
'cause we haven't updated state,

270
00:11:05.390 --> 00:11:07.390
but I see that there's an X there.

271
00:11:07.390 --> 00:11:10.140
And now if I put a nine on the end of the price,

272
00:11:10.140 --> 00:11:13.180
the new updated fish shows me a nine.

273
00:11:13.180 --> 00:11:14.510
Good.

274
00:11:14.510 --> 00:11:16.390
So now the question is how do I

275
00:11:16.390 --> 00:11:19.370
get this updated fish to swim upstream?

276
00:11:19.370 --> 00:11:21.090
So what we're gonna do is we're gonna go back

277
00:11:21.090 --> 00:11:24.890
to where our state is and that is our app Component.

278
00:11:24.890 --> 00:11:27.090
We're going to right below addFish,

279
00:11:27.090 --> 00:11:29.665
we're gonna make an updateFish property

280
00:11:29.665 --> 00:11:33.040
and that method is going to take in a key,

281
00:11:33.040 --> 00:11:34.564
which is which fish is getting updated

282
00:11:34.564 --> 00:11:37.780
and a updated fish.

283
00:11:37.780 --> 00:11:39.731
And what that will do is it will simply

284
00:11:39.731 --> 00:11:42.840
take a copy of the current fish.

285
00:11:42.840 --> 00:11:46.850
one, take a copy of the current state.

286
00:11:47.865 --> 00:11:52.865
Const, fishes equals this.state.fishes

287
00:11:54.690 --> 00:11:56.700
'cause it's not props 'cause we are actually

288
00:11:56.700 --> 00:12:00.130
in the Component where the state is living.

289
00:12:00.130 --> 00:12:01.680
And then two,

290
00:12:01.680 --> 00:12:04.360
update that state.

291
00:12:05.750 --> 00:12:08.490
And we can just say fishes,

292
00:12:08.490 --> 00:12:09.660
square bracket,

293
00:12:09.660 --> 00:12:13.430
key, is equal to updated fish.

294
00:12:13.430 --> 00:12:14.710
We could also use the computed

295
00:12:14.710 --> 00:12:16.651
property value there if you like.

296
00:12:16.651 --> 00:12:18.620
And then three,

297
00:12:18.620 --> 00:12:21.280
set that to state.

298
00:12:21.280 --> 00:12:26.160
This.setstate, fishes.

299
00:12:26.160 --> 00:12:31.160
Fishes or hot shot just fishes will work there.

300
00:12:31.430 --> 00:12:33.450
Oh, a couple mistakes there.

301
00:12:36.550 --> 00:12:37.640
Beautiful.

302
00:12:37.640 --> 00:12:39.720
Okay, now we have this update fish function

303
00:12:39.720 --> 00:12:42.710
that should take in a key and an updated fish.

304
00:12:42.710 --> 00:12:46.270
We'll go down to our inventory and pass it.

305
00:12:46.270 --> 00:12:48.030
So instead of passing addFish

306
00:12:48.030 --> 00:12:49.820
or in addition to passing addFish,

307
00:12:49.820 --> 00:12:52.190
we'll pass updateFish.

308
00:12:52.190 --> 00:12:53.776
Then we'll go into our inventory

309
00:12:53.776 --> 00:12:57.670
and we need to pass it one step further via props.

310
00:12:57.670 --> 00:13:00.020
So we'll go in here,

311
00:13:00.020 --> 00:13:05.020
say updateFish is equal to this.props.updateFish.

312
00:13:05.990 --> 00:13:07.500
Beautiful.

313
00:13:07.500 --> 00:13:11.560
And then we'll go into our EditFishForm

314
00:13:11.560 --> 00:13:16.560
and we should be able to say this.props.updateFish

315
00:13:19.522 --> 00:13:22.880
and it takes the key and it takes the updated fish.

316
00:13:22.880 --> 00:13:24.330
So we actually have a variable

317
00:13:24.330 --> 00:13:25.560
called updatedFish so that's good.

318
00:13:25.560 --> 00:13:27.113
We'll put that in there,

319
00:13:27.113 --> 00:13:29.406
but where do we get the key from?

320
00:13:29.406 --> 00:13:30.600
Well again,

321
00:13:30.600 --> 00:13:32.030
we've run into this problem where we don't

322
00:13:32.030 --> 00:13:33.740
actually know what the key is,

323
00:13:33.740 --> 00:13:37.870
because we haven't yet passed it into this Component.

324
00:13:37.870 --> 00:13:38.703
I'll show you.

325
00:13:38.703 --> 00:13:40.090
Let's go to React,

326
00:13:40.090 --> 00:13:42.440
let's look for EditFishForm.

327
00:13:42.440 --> 00:13:44.630
And we do see the key right here,

328
00:13:44.630 --> 00:13:46.700
but remember that we can't access the key

329
00:13:46.700 --> 00:13:48.440
when we're inside of a Component.

330
00:13:48.440 --> 00:13:50.163
So if we need that for whatever reason,

331
00:13:50.163 --> 00:13:53.020
we need to pass it down ourselves.

332
00:13:53.020 --> 00:13:55.432
So let's go back to inventory

333
00:13:55.432 --> 00:13:57.520
and we'll call this key

334
00:13:57.520 --> 00:14:01.030
and we'll pass down as index as well.

335
00:14:01.030 --> 00:14:02.040
So here,

336
00:14:02.040 --> 00:14:03.420
say this,

337
00:14:03.420 --> 00:14:07.200
we'll remove that key and say this.props.index.

338
00:14:09.130 --> 00:14:12.220
So let's go through exactly what's happening there

339
00:14:12.220 --> 00:14:13.720
'cause I know that was a lot.

340
00:14:13.720 --> 00:14:14.560
First of all,

341
00:14:14.560 --> 00:14:19.560
we have an input where the value is set to our fish name

342
00:14:20.510 --> 00:14:24.600
and that in turn is living in state.

343
00:14:24.600 --> 00:14:27.850
Then when something changes on that input,

344
00:14:27.850 --> 00:14:30.190
we call this function called handleChange.

345
00:14:30.190 --> 00:14:32.420
React will then automatically

346
00:14:32.420 --> 00:14:34.573
backspace that change that we did,

347
00:14:34.573 --> 00:14:37.540
but we can get the value of what

348
00:14:37.540 --> 00:14:42.380
the person had hoped to type in event.currenttarget.value

349
00:14:42.380 --> 00:14:46.250
and we can take that value and update our fish

350
00:14:46.250 --> 00:14:48.990
by using the event.currenttarget.value

351
00:14:48.990 --> 00:14:50.970
and we can only update the one field

352
00:14:50.970 --> 00:14:54.530
that got updated by using the input's name.

353
00:14:54.530 --> 00:14:55.520
And then finally,

354
00:14:55.520 --> 00:14:59.430
we send all of those changes upstream to our app Component,

355
00:14:59.430 --> 00:15:01.316
because that's where our state lives

356
00:15:01.316 --> 00:15:04.010
with the updateFish functions.

357
00:15:04.010 --> 00:15:05.972
So let's see if it actually works.

358
00:15:05.972 --> 00:15:07.980
Put an X on it.

359
00:15:07.980 --> 00:15:09.230
Of course it doesn't.

360
00:15:09.230 --> 00:15:10.210
Of course it doesn't.

361
00:15:10.210 --> 00:15:11.043
Type error,

362
00:15:11.043 --> 00:15:12.600
this.props.updatedfih.

363
00:15:15.369 --> 00:15:16.700
There's no D there.

364
00:15:16.700 --> 00:15:17.533
There we go.

365
00:15:17.533 --> 00:15:20.388
Should that do it?

366
00:15:20.388 --> 00:15:23.224
(cheers) It seems to be working.

367
00:15:23.224 --> 00:15:25.650
Atlantic halibut.

368
00:15:26.980 --> 00:15:27.850
Beautiful.

369
00:15:27.850 --> 00:15:29.360
And also if you check your Firebase

370
00:15:29.360 --> 00:15:31.610
you should see it also working there.

371
00:15:31.610 --> 00:15:34.050
You can also change the price of your value

372
00:15:34.050 --> 00:15:35.140
and it is updated.

373
00:15:35.140 --> 00:15:36.550
And this is the beauty of React

374
00:15:36.550 --> 00:15:39.360
is that anywhere your values are used,

375
00:15:39.360 --> 00:15:42.407
you can simply just pull in the values

376
00:15:42.407 --> 00:15:45.770
and update the variables down there.

377
00:15:45.770 --> 00:15:48.670
So that is being able to sync our data

378
00:15:48.670 --> 00:15:51.190
and that is generally how you wanna handle

379
00:15:51.190 --> 00:15:54.720
inputs where your state will live in an input.

