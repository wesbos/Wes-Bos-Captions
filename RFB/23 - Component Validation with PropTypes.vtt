WEBVTT

1
00:00:02.212 --> 00:00:03.379
[Upbeat Music]

2
00:00:06.811 --> 00:00:09.073
<v Narrator>One thing I found with after writing it</v>

3
00:00:09.073 --> 00:00:11.466
for maybe two and a half years now is I feel like

4
00:00:11.466 --> 00:00:13.617
it makes me a better job descriptive developer

5
00:00:13.617 --> 00:00:16.617
because sometimes things in react seem a little bit harder

6
00:00:16.617 --> 00:00:19.386
than they should be but I think as a rule of thumb,

7
00:00:19.386 --> 00:00:21.481
there are some weird things in it, but at a rule of thumb

8
00:00:21.481 --> 00:00:22.809
I think that those are forcing me to

9
00:00:22.809 --> 00:00:25.137
become a much better job descript developer.

10
00:00:25.137 --> 00:00:26.841
So what we're going to do right now is talk

11
00:00:26.841 --> 00:00:28.682
about something called PropTypes and now

12
00:00:28.682 --> 00:00:31.489
with prop types every time you have a component,

13
00:00:31.489 --> 00:00:35.696
you are often passing in some sort of data and

14
00:00:35.696 --> 00:00:37.516
how do you pass data into a component?

15
00:00:37.516 --> 00:00:38.349
With props.

16
00:00:38.349 --> 00:00:40.485
Well with PropTypes we can sort of validate the data

17
00:00:40.485 --> 00:00:43.420
that is being passed in to make sure we're passing

18
00:00:43.420 --> 00:00:46.846
the right kind of data that it's looking for and

19
00:00:46.846 --> 00:00:49.598
the data is being passed in that it actually looks

20
00:00:49.598 --> 00:00:52.326
the way that we're expecting it to be passed in.

21
00:00:52.326 --> 00:00:54.158
So what we're going to do is let's open up our

22
00:00:54.158 --> 00:00:56.031
header.js here and you'll notice that

23
00:00:56.031 --> 00:00:58.326
we use props.tagline right here.

24
00:00:58.326 --> 00:01:02.077
Now if I was on a team doing react components and

25
00:01:02.077 --> 00:01:04.517
I built this thing then I handed it off to somebody else

26
00:01:04.517 --> 00:01:09.517
to use it, how do they know that this component called

27
00:01:09.897 --> 00:01:13.082
header takes a prop called tagline then

28
00:01:13.082 --> 00:01:15.593
that prop is a string, right?

29
00:01:15.593 --> 00:01:17.449
Other than the short of opening it up,

30
00:01:17.449 --> 00:01:19.761
they don't really know that unless I have some

31
00:01:19.761 --> 00:01:21.081
sort of documentation.

32
00:01:21.081 --> 00:01:24.305
So what prop types allows us to do is specify ahead of time

33
00:01:24.305 --> 00:01:26.937
what needs to be passed in when it's used and

34
00:01:26.937 --> 00:01:29.875
if someone doesn't pass in the right type of data or

35
00:01:29.875 --> 00:01:33.185
the right amount of data, then we're going to give them

36
00:01:33.185 --> 00:01:35.641
a warning in their console telling them that

37
00:01:35.641 --> 00:01:37.161
they failed their PropType.

38
00:01:37.161 --> 00:01:39.834
So what we're going to do is we're going to go up here

39
00:01:39.834 --> 00:01:43.767
and we're going to import PropTypes capital P capital T

40
00:01:43.767 --> 00:01:47.074
from and this is in a separate package called prop-types.

41
00:01:47.074 --> 00:01:49.052
This used to be built into react, however,

42
00:01:49.052 --> 00:01:53.156
because some users use other ways to do type checking

43
00:01:53.156 --> 00:01:55.476
so some other ways your can do type checking is

44
00:01:55.476 --> 00:01:57.884
you can use a typed language to write your java script

45
00:01:57.884 --> 00:02:01.381
like TypeScript or you can use one of Facebook's utilities

46
00:02:01.381 --> 00:02:04.715
called Flow, which allows you to ahead of time declare

47
00:02:04.715 --> 00:02:07.924
what the props are that are being passed in and then

48
00:02:07.924 --> 00:02:10.059
PropTypes are sort of a third way we can do it.

49
00:02:10.059 --> 00:02:12.161
That's why it's in a separate package because

50
00:02:12.161 --> 00:02:16.197
it's not every project that will be using PropTypes.

51
00:02:16.197 --> 00:02:18.804
So we'll go down here, we'll take our header and

52
00:02:18.804 --> 00:02:22.470
we will add the propTypes, so this is lowercase P,

53
00:02:22.470 --> 00:02:24.525
capital T and that's just going to be an object.

54
00:02:24.525 --> 00:02:28.234
Now all you have to do now is pass at every single prop

55
00:02:28.234 --> 00:02:31.275
that you need and in our case, it's just tagline, and

56
00:02:31.275 --> 00:02:33.386
then you tell it which type you're expecting.

57
00:02:33.386 --> 00:02:36.402
The way that we do that is just say PropTypes.,

58
00:02:36.402 --> 00:02:38.366
and then we tell it, this is kind of cool,

59
00:02:38.366 --> 00:02:40.487
my auto complete is showing me, um,

60
00:02:40.487 --> 00:02:42.270
all of the possible option and

61
00:02:42.270 --> 00:02:45.943
this should always be passed in as a string and then you can

62
00:02:45.943 --> 00:02:49.535
also tack in an optional is required onto the end,

63
00:02:49.535 --> 00:02:52.279
which will tell you if it's required or not.

64
00:02:52.279 --> 00:02:54.383
So if I give a save now and I go back and

65
00:02:54.383 --> 00:02:57.504
open up my devtools, you'll see there's nothing showing up

66
00:02:57.504 --> 00:03:02.105
in here but if I were to go into my app.js and take off

67
00:03:02.105 --> 00:03:05.772
the tagline prop, watch what's gonna happen.

68
00:03:07.110 --> 00:03:09.819
Now it starts to yell at us, prop tagline is marked

69
00:03:09.819 --> 00:03:12.660
as required in header but it's value is undefined

70
00:03:12.660 --> 00:03:16.078
so that means you did not pass a tagline prop, good.

71
00:03:16.078 --> 00:03:19.625
Well what if I were to say maybe the tagline

72
00:03:19.625 --> 00:03:21.042
is equal to true?

73
00:03:22.499 --> 00:03:24.652
Like we're passing it as a Boolean, it's going

74
00:03:24.652 --> 00:03:26.226
to start complaining at us.

75
00:03:26.226 --> 00:03:29.748
It got a Boolean but it was expecting a string, right?

76
00:03:29.748 --> 00:03:32.629
Or if I pass in a number, it's going to yell at us

77
00:03:32.629 --> 00:03:35.317
for we got a number but we were expecting you

78
00:03:35.317 --> 00:03:36.484
to give us a string.

79
00:03:36.484 --> 00:03:38.021
You kind of get the point here.

80
00:03:38.021 --> 00:03:40.781
As you use it, before I even have to crack open this file

81
00:03:40.781 --> 00:03:43.613
to see what's wrong, it will give me a really good warning

82
00:03:43.613 --> 00:03:44.597
in the console.

83
00:03:44.597 --> 00:03:46.966
Now, these will not make it to production.

84
00:03:46.966 --> 00:03:50.442
So for whatever reason, if you deploy this to production,

85
00:03:50.442 --> 00:03:53.010
it's not going to give you this error.

86
00:03:53.010 --> 00:03:56.241
It's just sort of a development helper that we have.

87
00:03:56.241 --> 00:03:59.555
So I'm going to bring that tagline back here and

88
00:03:59.555 --> 00:04:01.035
what we're going to do now is go

89
00:04:01.035 --> 00:04:03.211
through all our different components we that have written

90
00:04:03.211 --> 00:04:06.754
in this course so far and start writing props for them.

91
00:04:06.754 --> 00:04:09.563
So there's some documentation here for what the different

92
00:04:09.563 --> 00:04:14.066
types of PropTypes are, obviously, you have all of the types

93
00:04:14.066 --> 00:04:15.794
that come along with react.

94
00:04:15.794 --> 00:04:19.583
So array, bool and func, I guess those are reserved words

95
00:04:19.583 --> 00:04:22.759
in JavaScript so you have to use bool instead of Boolean

96
00:04:22.759 --> 00:04:24.207
and func instead of function.

97
00:04:24.207 --> 00:04:26.343
The rest of them are what you'd expect.

98
00:04:26.343 --> 00:04:28.231
However, you can also expect somebody

99
00:04:28.231 --> 00:04:31.865
to pass you another component, you can expect people

100
00:04:31.865 --> 00:04:34.158
to pass you a note or an element.

101
00:04:34.158 --> 00:04:36.625
You can expect to pass one of the things.

102
00:04:36.625 --> 00:04:39.690
So it could either be a string, number or an instance

103
00:04:39.690 --> 00:04:42.993
of the message component and then there's another one here.

104
00:04:42.993 --> 00:04:44.049
This is the shape.

105
00:04:44.049 --> 00:04:45.897
This is what we're going to use, as well.

106
00:04:45.897 --> 00:04:48.602
Cause I find this one particularly helpful when passing

107
00:04:48.602 --> 00:04:50.930
objects that need to look a certain way.

108
00:04:50.930 --> 00:04:53.913
So let's go, um, let's just go into fish.js and let's just

109
00:04:53.913 --> 00:04:55.145
do that one first.

110
00:04:55.145 --> 00:04:58.728
So at the top of it, we'll import PropTypes

111
00:05:00.492 --> 00:05:01.992
from prop-types

112
00:05:04.551 --> 00:05:07.156
and you notice how I out that above this?

113
00:05:07.156 --> 00:05:10.156
I always like to import my MPM packages first then

114
00:05:10.156 --> 00:05:14.713
import my, uh, relative paths after that and then

115
00:05:14.713 --> 00:05:16.722
they don't have to mix and match them.

116
00:05:16.722 --> 00:05:20.081
Then what we'll do is, since this is not a, like this one,

117
00:05:20.081 --> 00:05:22.619
what's the name for this type of component?

118
00:05:22.619 --> 00:05:25.202
It's a stateless functional component, we need to do it

119
00:05:25.202 --> 00:05:26.859
after the fact, like this.

120
00:05:26.859 --> 00:05:30.294
Now, this one is a regular react component so we can simply

121
00:05:30.294 --> 00:05:33.877
just put a static property called propTypes

122
00:05:35.791 --> 00:05:37.495
and put an object on it.

123
00:05:37.495 --> 00:05:40.248
The reason why that is static is because we're declaring

124
00:05:40.248 --> 00:05:43.625
the PropTypes for all of the fish and every single time

125
00:05:43.625 --> 00:05:46.344
that we make a new fish, it's not necessary

126
00:05:46.344 --> 00:05:48.985
to duplicate those PropTypes to every single one,

127
00:05:48.985 --> 00:05:50.857
if they're going to be exactly the same

128
00:05:50.857 --> 00:05:52.448
for every single component.

129
00:05:52.448 --> 00:05:54.224
So by putting it static, it sort of lives

130
00:05:54.224 --> 00:05:59.220
on the momma fish component and we are unnecessarily

131
00:05:59.220 --> 00:06:02.499
copying the PropTypes to every single instance,

132
00:06:02.499 --> 00:06:03.764
since they're going to be exactly the same.

133
00:06:03.764 --> 00:06:06.487
Now, uh, what are the props that we have here?

134
00:06:06.487 --> 00:06:07.320
Well,

135
00:06:07.320 --> 00:06:10.267
we are passing in and the way you can tell is I was

136
00:06:10.267 --> 00:06:13.211
just like search for this.props and we've got

137
00:06:13.211 --> 00:06:16.624
this.props.details and add to order.

138
00:06:16.624 --> 00:06:20.025
So I'll go up here we'll say details

139
00:06:20.025 --> 00:06:23.463
and we need add to order.

140
00:06:23.463 --> 00:06:24.744
So let's do add to order first,

141
00:06:24.744 --> 00:06:26.223
since that's going to be very simple.

142
00:06:26.223 --> 00:06:27.207
Let's look here.

143
00:06:27.207 --> 00:06:29.255
It's going to be a function.

144
00:06:29.255 --> 00:06:33.755
So we'll take this PropTypes.func and then the details

145
00:06:35.823 --> 00:06:38.703
is going to be, well what is it gonna be?

146
00:06:38.703 --> 00:06:42.412
Details is going to have the image, the name, the price,

147
00:06:42.412 --> 00:06:44.476
the description and the status.

148
00:06:44.476 --> 00:06:46.532
This is a little bit weird.

149
00:06:46.532 --> 00:06:51.532
Of course, we could go and say PropTypes.object

150
00:06:53.710 --> 00:06:57.346
and it would pass with flying colors, see no errors there.

151
00:06:57.346 --> 00:07:00.212
But that's a bit of a cheat because like that's just

152
00:07:00.212 --> 00:07:03.631
saying you pass in any object and this would not work

153
00:07:03.631 --> 00:07:06.255
if I didn't pass in an object that consisted

154
00:07:06.255 --> 00:07:08.335
of these five things.

155
00:07:08.335 --> 00:07:11.423
So what we can do instead of saying an object,

156
00:07:11.423 --> 00:07:16.175
we can give it a PropTypes.shape and a shape is a function

157
00:07:16.175 --> 00:07:19.391
that accepts an object and these are where we're going

158
00:07:19.391 --> 00:07:22.439
to specify what all of the different properties

159
00:07:22.439 --> 00:07:26.826
actually are, so we have an image, name, price,

160
00:07:26.826 --> 00:07:30.693
description and status and I'm going to move price

161
00:07:30.693 --> 00:07:32.778
to the bottom here because all of these are going

162
00:07:32.778 --> 00:07:34.187
to be pretty simple.

163
00:07:34.187 --> 00:07:36.937
It's going to be PropTypes.string

164
00:07:38.001 --> 00:07:41.559
and then price is going to be a number.

165
00:07:41.559 --> 00:07:43.256
I really like this one.

166
00:07:43.256 --> 00:07:45.680
I probably used this one the most out of everything

167
00:07:45.680 --> 00:07:48.592
because when I'm passing values to a component,

168
00:07:48.592 --> 00:07:50.840
it's almost always I'm passing an object an object full

169
00:07:50.840 --> 00:07:52.760
of data that needs to be displayed.

170
00:07:52.760 --> 00:07:56.958
So that's why I like to pass it as a shape and then

171
00:07:56.958 --> 00:08:00.855
it checks that the object you are sending it will have

172
00:08:00.855 --> 00:08:04.505
all of these properties with these being types added in.

173
00:08:04.505 --> 00:08:07.105
Good, so that is fish and if you'd like to pause this video

174
00:08:07.105 --> 00:08:10.172
and just go through and do them yourselves, I think you'd

175
00:08:10.172 --> 00:08:11.141
kind of get the point.

176
00:08:11.141 --> 00:08:13.317
I'll go through them together in case you want to hang on

177
00:08:13.317 --> 00:08:14.461
and listen to the rest.

178
00:08:14.461 --> 00:08:17.085
Otherwise, really the thing that you need to know

179
00:08:17.085 --> 00:08:20.173
is whenever you write this.props.something you should

180
00:08:20.173 --> 00:08:22.469
stop and write a PropType for it really quickly.

181
00:08:22.469 --> 00:08:25.355
The cheesy thing I always say is stop, drop and prop

182
00:08:25.355 --> 00:08:27.804
and [Laughs] you're gonna be in good shape and

183
00:08:27.804 --> 00:08:32.043
probably save yourself a headache somewhere down the road

184
00:08:32.043 --> 00:08:35.026
where you forget to pass in the right amount of data.

185
00:08:35.026 --> 00:08:37.771
So if you are leaving me now, goodbye, I'll see you

186
00:08:37.771 --> 00:08:38.604
in the next video.

187
00:08:38.604 --> 00:08:40.556
Otherwise, let's keep going through the rest of them.

188
00:08:40.556 --> 00:08:42.739
Next up is the add fish form

189
00:08:42.739 --> 00:08:46.519
and we'll say this.props.addFish is one.

190
00:08:46.519 --> 00:08:48.936
It's gonna search for the rest.

191
00:08:48.936 --> 00:08:49.769
That's it.

192
00:08:49.769 --> 00:08:51.974
So addFish is the only one.

193
00:08:51.974 --> 00:08:54.517
We're gonna go up here

194
00:08:54.517 --> 00:08:58.434
say static propTypes.

195
00:08:59.777 --> 00:09:02.177
I always goof up the casing of it.

196
00:09:02.177 --> 00:09:04.578
So it's lowercase P capital case T and

197
00:09:04.578 --> 00:09:07.997
then the package is capital P, capital T.

198
00:09:07.997 --> 00:09:09.997
So import PropTypes from

199
00:09:12.837 --> 00:09:13.670
prop-types

200
00:09:14.980 --> 00:09:19.813
and then we here, we need PropTypes.func.

201
00:09:23.568 --> 00:09:25.092
I always make sure I give it a reload and

202
00:09:25.092 --> 00:09:26.609
it still works just fine, good.

203
00:09:26.609 --> 00:09:29.809
Let's go through the rest of them.

204
00:09:29.809 --> 00:09:34.809
App.js doesn't have any props, you could well this.props

205
00:09:37.610 --> 00:09:40.610
you could assume that the props.match is coming in

206
00:09:40.610 --> 00:09:43.106
from the router, so in that case, we could either

207
00:09:43.106 --> 00:09:45.971
shape it out for the pieces that we need or

208
00:09:45.971 --> 00:09:47.290
just say it's an object.

209
00:09:47.290 --> 00:09:51.290
So in this case, I will just say it's an object.

210
00:10:01.893 --> 00:10:05.005
Good and then make sure you import it

211
00:10:05.005 --> 00:10:06.589
at the top of your file.

212
00:10:06.589 --> 00:10:10.756
I'm gonna put it right underneath importing react.

213
00:10:11.762 --> 00:10:15.012
Good, so it's app EditFishForm is next.

214
00:10:16.279 --> 00:10:21.279
So we've got this.props.fish .updatefish and index.

215
00:10:24.554 --> 00:10:25.721
We'll go here,

216
00:10:28.893 --> 00:10:30.810
make this a bit bigger.

217
00:10:36.309 --> 00:10:39.976
So what did I say, we got fish, we got index

218
00:10:41.004 --> 00:10:43.087
and we've got updateFish.

219
00:10:44.117 --> 00:10:44.950
Good.

220
00:10:45.980 --> 00:10:47.647
Import my prop types

221
00:10:48.877 --> 00:10:53.460
and then for each of these I'm going to have PropTypes.

222
00:10:55.268 --> 00:10:57.624
Dot and then we'll go through each of them.

223
00:10:57.624 --> 00:11:01.616
First one is going to be a shape where the fish will contain

224
00:11:01.616 --> 00:11:03.536
again, this is like kind of the same thing.

225
00:11:03.536 --> 00:11:05.920
So you could even put these in their own file and

226
00:11:05.920 --> 00:11:08.016
import and export them if you find yourself using

227
00:11:08.016 --> 00:11:10.160
it much more often.

228
00:11:10.160 --> 00:11:13.629
So fish.js is where I've used those before just go ahead

229
00:11:13.629 --> 00:11:18.212
and take that entire shape object and paste it in here.

230
00:11:22.500 --> 00:11:25.745
Index is going to be a string and updateFish is

231
00:11:25.745 --> 00:11:27.328
going to be a func.

232
00:11:28.504 --> 00:11:30.306
Good, we still in good shape?

233
00:11:30.306 --> 00:11:34.223
Oop, I got an error on EditFishForm on line 14.

234
00:11:36.068 --> 00:11:37.339
What did I do?

235
00:11:37.339 --> 00:11:39.089
A colon, there we go.

236
00:11:41.042 --> 00:11:43.306
Still working good for me.

237
00:11:43.306 --> 00:11:47.306
With edit we did fish, we did header, inventory.

238
00:11:50.484 --> 00:11:53.317
So this.props.fishes

239
00:11:55.564 --> 00:11:58.300
and so we got fished, updateFish,

240
00:11:58.300 --> 00:12:00.967
deleteFish and loadSampleFishes.

241
00:12:26.501 --> 00:12:28.213
Lowercase P.

242
00:12:28.213 --> 00:12:30.957
So fishes is going to be an array.

243
00:12:30.957 --> 00:12:33.540
The rest of them are functions.

244
00:12:35.388 --> 00:12:36.976
Oop, we got an error.

245
00:12:36.976 --> 00:12:41.681
Invalid, oh, it's not an array, it's an object.

246
00:12:41.681 --> 00:12:43.801
Good and of course you can go a little deeper

247
00:12:43.801 --> 00:12:45.905
and shape those out.

248
00:12:45.905 --> 00:12:48.655
Uh, not found has nothing, order.

249
00:12:52.161 --> 00:12:56.854
Let's take the PropTypes package, import that right away.

250
00:12:56.854 --> 00:13:00.437
This.props, so we got fishes, we got order,

251
00:13:02.794 --> 00:13:07.794
we got removeFromOrder and that's it.

252
00:13:12.430 --> 00:13:15.347
So fishes is going to be an object.

253
00:13:16.590 --> 00:13:18.366
Order is going to be an object and

254
00:13:18.366 --> 00:13:20.533
removeFromOrder is a func.

255
00:13:22.176 --> 00:13:23.759
Still looking good.

256
00:13:25.562 --> 00:13:27.459
Router doesn't have any props and

257
00:13:27.459 --> 00:13:32.209
store picker needs history.

258
00:13:35.874 --> 00:13:39.241
Beautiful, got all my prop types now being pulled in

259
00:13:39.241 --> 00:13:42.161
and, uh, I made my application a little but more resilient

260
00:13:42.161 --> 00:13:45.764
so I know that I'm passing in both the right data

261
00:13:45.764 --> 00:13:47.524
as well as in the right type of data.

